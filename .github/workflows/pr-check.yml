name: PR Merge Check - Javelin Documentation

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - "main"
    # paths:
    #   - '**/*.md'
    #   - '**/*.mdx'
    #   - 'docs/**'
    #   - '.markdownlint.json'
  merge_group:
    types:
      - checks_requested

env:
  NODE_VER: 18
  PR_CHECK_PREFIX: "feat:|fix:|devops:|Merge|Revert|build\\(deps\\)|\\[Snyk\\]|Bump"
  GH_SEC_REPORT: false
  TRIVY_SEVERITY: "HIGH,CRITICAL"
  TRIVY_REPORT_FILE: "trivy-scan-result"

jobs:
  javelin-commit-check:
    permissions:
      contents: 'read'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false

      - name: Get the last commit message
        id: commit_message
        run: |
          COMMIT_MESSAGE=$(git show -s --format=%s)
          echo "message=${COMMIT_MESSAGE}" >> ${GITHUB_OUTPUT}

      - name: Commit Message Check
        shell: bash
        env:
          COMMIT_MESSAGE: "${{ steps.commit_message.outputs.message }}"
        run: |-
          CLEAN_COMMIT_MESSAGE=$(echo '${{ env.COMMIT_MESSAGE }}' | sed "s|\"||g")
          if [[ "${CLEAN_COMMIT_MESSAGE}" =~ ^(${{ env.PR_CHECK_PREFIX }}) ]]; then
            echo "Commit message is valid....!"
          else
            echo "Commit message does not contain required keywords....!"
            exit 1
          fi

  javelin-markdown-lint-check:
    permissions:
      contents: 'read'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Node Version
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VER }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run markdownlint
        run: npm run lint:docs

  javelin-lint-check:
    permissions:
      contents: 'read'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Node Version
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VER }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check internal links
        uses: lycheeverse/lychee-action@v2.0.2
        with:
          args: >-
            --verbose --no-progress --exclude-all-private --exclude-mail
            --accept 200,204,301,302,403,429,999
            --exclude 'https://your-api-domain.com'
            --exclude 'https://your-javelin-domain.com'
            --exclude 'https://api-domain.com'
            'docs/**/*.md' 'docs/**/*.mdx'
          fail: false

  javelin-front-matter-check:
    permissions:
      contents: 'read'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Node Version
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VER }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check front matter consistency
        run: |
          echo "Checking front matter consistency..."
          find docs -name "*.md" -o -name "*.mdx" | while read file; do
            if head -n 1 "$file" | grep -q "^---$"; then
              if ! head -n 20 "$file" | tail -n +2 | grep -q "^---$"; then
                echo "Error: $file has opening front matter delimiter but no closing delimiter"
                exit 1
              fi
            fi
          done
          echo "Front matter validation passed"

  javelin-trivy-scan:
    permissions:
      contents: 'read'
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Trivy Scan - GitHub Security Report
        if: ${{ env.GH_SEC_REPORT == 'true' }}
        uses: aquasecurity/trivy-action@0.29.0
        with:
          ignore-unfixed: true
          scan-type: "fs"
          cache: "true"
          format: "sarif"
          output: "${{ env.TRIVY_REPORT_FILE }}.sarif"
          severity: "${{ env.TRIVY_SEVERITY }}"

      - name: Upload Report - GitHub Security Report
        if: ${{ env.GH_SEC_REPORT == 'true' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "${{ env.TRIVY_REPORT_FILE }}.sarif"

      - name: Trivy Scan - Text Security Report
        if: ${{ env.GH_SEC_REPORT == 'false' }}
        uses: aquasecurity/trivy-action@0.29.0
        with:
          ignore-unfixed: true
          scan-type: "fs"
          cache: "true"
          format: "table"
          output: "${{ env.TRIVY_REPORT_FILE }}.txt"
          severity: "${{ env.TRIVY_SEVERITY }}"

      - name: Report Check - Text Security Report
        if: ${{ env.GH_SEC_REPORT == 'false' }}
        id: report_check
        shell: bash
        run: |-
          if [[ -s ${{ env.TRIVY_REPORT_FILE }}.txt ]] ; then
            echo "report_file=available" >> ${GITHUB_OUTPUT}
          else
            echo "report_file=unavailable" >> ${GITHUB_OUTPUT}
          fi
          cat ${{ env.TRIVY_REPORT_FILE }}.txt

      - name: Upload Report - Text Security Report
        if: ${{ env.GH_SEC_REPORT == 'false' && steps.report_check.outputs.report_file  == 'available' }}
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.TRIVY_REPORT_FILE }}"
          path: "${{ env.TRIVY_REPORT_FILE }}.txt"
          if-no-files-found: error
          retention-days: 1

      - name: Failing the Job
        if: ${{ steps.report_check.outputs.report_file  == 'available' }}
        shell: bash
        run: |-
          echo "Vulnerabilities Found.....!"
          exit 1
