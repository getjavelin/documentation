name: CICD Build - Javelin Documentation

on:
  push:
    branches:
      - "dev"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  env_var: ${{ vars.ENV_CONTEXT_VAR }}
  REGISTRY: ghcr.io
  DEVOPS_REPO: "javelin-cloud"
  DEVOPS_BRANCH: "main"
  NODE_VER: 20
  PIPELINE_ROLE: "cicd"
  SVC_NAME: "javelin-doc"

jobs:
  reusable-vars:
    runs-on: ubuntu-24.04
    steps:
      - name: reusable variables
        run: echo "Exposing env vars"
    outputs:
      PIPELINE_ROLE: ${{ env.PIPELINE_ROLE }}
      SVC_NAME: ${{ env.SVC_NAME }}

  reusable-workflow-env:
    needs:
      - reusable-vars
    permissions:
      contents: 'read'
      id-token: 'write'
    uses: getjavelin/javelin-workflow/.github/workflows/workflow-cicd-env.yml@main
    with:
      PIPELINE_ROLE: ${{ needs.reusable-vars.outputs.PIPELINE_ROLE }}
      INPUT_SVC_NAME: ${{ needs.reusable-vars.outputs.SVC_NAME }}
    secrets:
      DEVOPS_GITHUB_TOKEN: ${{ secrets.DEVOPS_GITHUB_TOKEN }}

  javelin-build:
    needs:
      - reusable-vars
      - reusable-workflow-env
    permissions:
      contents: "read"
      id-token: "write"
      packages: "write"
    runs-on: ubuntu-24.04
    env:
      IMAGE_NAME: "${{ github.repository_owner }}/${{ needs.reusable-workflow-env.outputs.build_env }}-${{ needs.reusable-vars.outputs.SVC_NAME }}"
    strategy:
      matrix:
        platform: ${{ fromJSON(needs.reusable-workflow-env.outputs.build_platform) }}
    steps:
      - name: Prepare Build
        id: prepare_build
        shell: bash
        run: |-
          platform=${{ matrix.platform }}
          echo "data=${platform//\//-}" >> ${GITHUB_OUTPUT}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VER }}
          cache: "npm"

      - name: Build Code
        shell: bash
        run: |-
          yarn install

      - name: Extract Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha, prefix=commit-
            type=raw, value=latest

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.DEVOPS_PKG_TOKEN }}

      - name: Build Docker Image
        id: img_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Deploy-Dockerfile
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true

      - name: Export Digest
        shell: bash
        run: |-
          mkdir -p /tmp/digests
          digest="${{ steps.img_build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload Digest
        env:
          PLATFORM_PAIR: ${{ steps.prepare_build.outputs.data }}
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  reusable-workflow-manifest:
    needs:
      - reusable-vars
      - reusable-workflow-env
      - javelin-build
    permissions:
      contents: 'read'
      id-token: 'write'
    uses: getjavelin/javelin-workflow/.github/workflows/workflow-cicd-manifest.yml@main
    with:
      IMAGE_NAME: "${{ github.repository_owner }}/${{ needs.reusable-workflow-env.outputs.build_env }}-${{ needs.reusable-vars.outputs.SVC_NAME }}"
      IMAGE_TAG: "commit-${{ needs.reusable-workflow-env.outputs.short_sha }}"
    secrets:
      DEVOPS_PKG_TOKEN: ${{ secrets.DEVOPS_PKG_TOKEN }}

  javelin-deploy-aws:
    needs:
      - reusable-vars
      - reusable-workflow-env
      - reusable-workflow-manifest
    permissions:
      contents: "read"
      id-token: "write"
    runs-on: ubuntu-24.04
    if: (needs.reusable-workflow-env.outputs.environment_aws_string != '')
    env:
      IMAGE_NAME: "${{ github.repository_owner }}/${{ needs.reusable-workflow-env.outputs.build_env }}-${{ needs.reusable-vars.outputs.SVC_NAME }}"
      IMAGE_TAG: "commit-${{ needs.reusable-workflow-env.outputs.short_sha }}"
      RELEASE_MODE: ${{ needs.reusable-workflow-env.outputs.release_mode }}
    strategy:
      matrix:
        environment: ${{ fromJSON(needs.reusable-workflow-env.outputs.environment_aws) }}
    steps:
      - name: DevOps Repository Checkout
        uses: actions/checkout@v4
        with:
          repository: "${{ github.repository_owner }}/${{ env.DEVOPS_REPO }}"
          token: ${{ secrets.DEVOPS_GITHUB_TOKEN }}
          fetch-depth: 0
          persist-credentials: false
          ref: ${{ env.DEVOPS_BRANCH }}
          path: ${{ env.DEVOPS_REPO }}

      - name: Setting up Deploy Env
        id: env_auth
        uses: getjavelin/javelin-workflow/.github/actions/env-auth@main
        with:
          DEPLOY_ENV: "${{ matrix.environment }}"

      - name: Cloud Config
        id: cloud_config
        uses: getjavelin/javelin-workflow/.github/actions/cloud-config@main
        with:
          CLOUD_PROVIDER: "aws"
          DEPLOY_ENV: ${{ steps.env_auth.outputs.deploy_env }}
          SVC_NAME: ${{ env.SVC_NAME }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ steps.env_auth.outputs.cicd_role }}"
          role-session-name: ${{ steps.env_auth.outputs.cicd_role }}
          audience: sts.amazonaws.com
          aws-region: ${{ steps.cloud_config.outputs.deploy_region }}

      - name: Get CICD Secret from AWS Secret Manager
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ${{ steps.env_auth.outputs.cicd_secret }}
          parse-json-secrets: true

      - name: Setting up CICD Secret
        id: set_cicd_secret
        env:
          CICD_SECRET_NAME: ${{ steps.env_auth.outputs.cicd_secret }}
        shell: bash
        run: |-
          echo "k8s_cluster_name=$(echo ${{ env.CICD_SECRET_NAME }}_k8s_cluster_name | sed 's|-|_|g' | tr '[:lower:]' '[:upper:]')" >> ${GITHUB_OUTPUT}
          echo "service_namespace=$(echo ${{ env.CICD_SECRET_NAME }}_service_namespace | sed 's|-|_|g' | tr '[:lower:]' '[:upper:]')" >> ${GITHUB_OUTPUT}
          echo "alb_security_group_ids=$(echo ${{ env.CICD_SECRET_NAME }}_alb_security_group_ids | sed 's|-|_|g' | tr '[:lower:]' '[:upper:]')" >> ${GITHUB_OUTPUT}
          echo "public_subnet_ids=$(echo ${{ env.CICD_SECRET_NAME }}_public_subnet_ids | sed 's|-|_|g' | tr '[:lower:]' '[:upper:]')" >> ${GITHUB_OUTPUT}

      - name: Get CICD Manual Secret from AWS Secret Manager
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ${{ steps.env_auth.outputs.cicd_secret_manual }}
          parse-json-secrets: true

      - name: Setting up CICD Manual Secret
        id: set_cicd_manual_secret
        env:
          CICD_SECRET_MANUAL_NAME: ${{ steps.env_auth.outputs.cicd_secret_manual }}
        shell: bash
        run: |-
          echo "helm_chart=$(echo ${{ env.CICD_SECRET_MANUAL_NAME }}_helm_chart | sed 's|-|_|g' | tr '[:lower:]' '[:upper:]')" >> ${GITHUB_OUTPUT}
          echo "doc_acm_certificate_arn=$(echo ${{ env.CICD_SECRET_MANUAL_NAME }}_doc_acm_certificate_arn | sed 's|-|_|g' | tr '[:lower:]' '[:upper:]')" >> ${GITHUB_OUTPUT}
          echo "doc_domain=$(echo ${{ env.CICD_SECRET_MANUAL_NAME }}_doc_domain | sed 's|-|_|g' | tr '[:lower:]' '[:upper:]')" >> ${GITHUB_OUTPUT}

      - name: Setting up Helm Value Files
        env:
          DOCKER_IMAGE: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          DEPLOY_ENV: ${{ steps.env_auth.outputs.deploy_env }}
          K8S_CLUSTER_NAME: $${{ steps.set_cicd_secret.outputs.k8s_cluster_name }}
          PUBLIC_SUBNET_IDS: $${{ steps.set_cicd_secret.outputs.public_subnet_ids }}
          ALB_SECURITY_GROUP_IDS: $${{ steps.set_cicd_secret.outputs.alb_security_group_ids }}
          DOC_ACM_CERTIFICATE_ARN: $${{ steps.set_cicd_manual_secret.outputs.doc_acm_certificate_arn }}
          DOC_DOMAIN: $${{ steps.set_cicd_manual_secret.outputs.doc_domain }}
        shell: bash
        run: |-
          export DOCKER_IMAGE=${{ env.DOCKER_IMAGE }}
          export IMAGE_TAG=${{ env.IMAGE_TAG }}
          export SVC_NAME=${{ env.SVC_NAME }}
          export K8S_CLUSTER_NAME=${{ env.K8S_CLUSTER_NAME }}
          export PUBLIC_SUBNET_IDS=${{ env.PUBLIC_SUBNET_IDS }}
          export ALB_SECURITY_GROUP_IDS=${{ env.ALB_SECURITY_GROUP_IDS }}
          export DOC_ACM_CERTIFICATE_ARN=${{ env.DOC_ACM_CERTIFICATE_ARN }}
          export DOC_DOMAIN=${{ env.DOC_DOMAIN }}

          if [[ -d ${{ env.DEVOPS_REPO }}/k8s-deploy/${{ env.DEPLOY_ENV }}/${{ env.SVC_NAME }} ]] ; then
            envsubst < ${{ env.DEVOPS_REPO }}/k8s-deploy/${{ env.DEPLOY_ENV }}/${{ env.SVC_NAME }}/helm-values-tmpl.yml > helm-values.yml
            if [[ -f set-env.sh ]] ; then
              envsubst < ${{ env.DEVOPS_REPO }}/k8s-deploy/${{ env.DEPLOY_ENV }}/${{ env.SVC_NAME }}/set-env-tmpl.sh > set-env.sh
            fi
          else
            echo "Not found : ${{ env.DEVOPS_REPO }}/k8s-deploy/${{ env.DEPLOY_ENV }}/${{ env.SVC_NAME }}"
            exit 1
          fi

      - name: Deploying Helm Chart into K8S
        uses: getjavelin/javelin-workflow/.github/actions/k8s-deploy@main
        with:
          K8S_CLUSTER_TYPE: "eks"
          AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
          CICD_ROLE: ${{ steps.env_auth.outputs.cicd_role }}
          HELM_CHART: $${{ steps.set_cicd_manual_secret.outputs.helm_chart }}
          K8S_CLUSTER_NAME: $${{ steps.set_cicd_secret.outputs.k8s_cluster_name }}
          K8S_NAMESPACE: $${{ steps.set_cicd_secret.outputs.service_namespace }}
          REGION: ${{ steps.cloud_config.outputs.deploy_region }}
          SVC_NAME: ${{ env.SVC_NAME }}
          RELEASE_MODE: ${{ env.RELEASE_MODE }}

  reusable-workflow-notify:
    needs:
      - reusable-vars
      - reusable-workflow-env
      - javelin-deploy-aws
    permissions:
      contents: 'read'
      id-token: 'write'
    if: >
        always() &&
        (
          (needs.javelin-deploy-aws.result != 'success' && needs.javelin-deploy-aws.result != 'skipped')
        )
    uses: getjavelin/javelin-workflow/.github/workflows/workflow-cicd-notify.yml@main
    with:
      DEPLOY_ENV: "${{ needs.reusable-workflow-env.outputs.environment_aws_string }}"
      SVC_NAME: ${{ needs.reusable-vars.outputs.SVC_NAME }}
      JOB_STATUS: ${{ needs.javelin-deploy-aws.result }}
      JOB_STATUS_MARK: ":x:"
      COMMIT_AUTHOR: ${{ github.event.commits[0].author.name }}
      COMMIT_SHA: ${{ needs.reusable-workflow-env.outputs.short_sha }}
      COMMIT_URL: ${{ github.event.head_commit.url }}
      BUILD_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
    secrets:
      DEVOPS_GITHUB_TOKEN: ${{ secrets.DEVOPS_GITHUB_TOKEN }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}