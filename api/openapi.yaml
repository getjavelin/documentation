definitions:
  model.APIKey:
    properties:
      api_key:
        type: string
      api_key_secret_key:
        type: string
      api_key_secret_key_javelin:
        type: string
      api_key_secret_name:
        type: string
      created_at:
        type: string
      created_by:
        type: string
      enabled:
        type: boolean
      group:
        type: string
      header_key:
        type: string
      modified_at:
        type: string
      modified_by:
        type: string
      organization:
        type: string
      provider_name:
        type: string
      query_param_key:
        type: string
    type: object
  model.Gateway:
    properties:
      config:
        description: Configuration of the gateway
        type: object
      created_at:
        description: Creation timestamp
        type: string
      created_by:
        description: Creator of the gateway
        type: string
      enabled:
        description: Whether the gateway is enabled
        type: boolean
      gateway_id:
        description: Unique identifier for the gateway
        type: string
      modified_at:
        description: Modification timestamp
        type: string
      modified_by:
        description: Last modifier of the gateway
        type: string
      name:
        description: Name of the gateway
        type: string
      type:
        description: Type of the gateway
        type: string
    type: object
  model.ModelConfig:
    properties:
      fallback_codes:
        description: Fallback codes
        items:
          type: integer
        type: array
      fallback_enabled:
        description: Whether fallback is enabled
        type: boolean
      name:
        description: Name of the model
        type: string
      provider:
        description: Provider of the model
        type: string
      suffix:
        description: Suffix for the model
        type: string
      virtual_secret_key:
        description: Virtual secret name
        type: string
      weight:
        description: Weight of the model
        type: integer
    type: object
  model.Provider:
    properties:
      api_keys:
        description: API keys associated with the provider
        items:
          type: object
        type: array
      config:
        description: Configuration of the provider
        type: object
      created_at:
        description: Creation timestamp
        type: string
      created_by:
        description: Creator of the provider
        type: string
      enabled:
        description: Whether the provider is enabled
        type: boolean
      modified_at:
        description: Modification timestamp
        type: string
      modified_by:
        description: Last modifier of the provider
        type: string
      name:
        description: Name of the provider
        type: string
      type:
        description: Type of the provider
        type: string
      vault_enabled:
        description: Whether the provider's vault is enabled
        type: boolean
    type: object
  model.ResponseMessage:
    properties:
      message:
        type: string
    type: object
  model.Route:
    properties:
      config:
        description: Configuration of the route
        type: object
      created_at:
        description: Creation timestamp
        type: string
      created_by:
        description: Creator of the route
        type: string
      enabled:
        description: Whether the route is enabled
        type: boolean
      models:
        description: Models associated with the route
        items:
          $ref: '#/definitions/model.ModelConfig'
        type: array
      modified_at:
        description: Modification timestamp
        type: string
      modified_by:
        description: Last modifier of the route
        type: string
      name:
        description: Name of the route
        type: string
      type:
        description: Type of the route
        type: string
    type: object
  model.Template:
    properties:
      config:
        description: Template specific configuration
        type: object
      created_at:
        type: string
      created_by:
        type: string
      description:
        description: Description for the Template
        type: string
      enabled:
        description: Whether the Template is enabled or not
        type: boolean
      models:
        description: Models from spaCy, Cloud DLP etc.
        items:
          $ref: '#/definitions/model.ModelConfig'
        type: array
      modified_at:
        type: string
      modified_by:
        type: string
      name:
        description: Short Name for the Template like "inspect", "deidentify", "reidentify"
          etc.
        type: string
      type:
        description: Type of the Template, e.g. spaCy, Cloud DLP etc.
        type: string
    type: object
info:
  contact: {}
paths:
  /v1/admin/dataprotection/templates:
    get:
      consumes:
      - application/json
      description: Get a list of all templates
      parameters:
      - description: Javelin API Key
        in: header
        name: x-api-key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Template'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: No templates found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: List all templates
      tags:
      - Data Protection
    post:
      consumes:
      - application/json
      description: Add a new template with the specified details
      parameters:
      - description: Javelin API Key
        in: header
        name: x-api-key
        required: true
        type: string
      - description: Template Name
        in: path
        name: templatename
        required: true
        type: string
      - description: Template details
        in: body
        name: template
        required: true
        schema:
          $ref: '#/definitions/model.Template'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Failed to create template
          schema:
            type: string
      summary: Create a new template
      tags:
      - Data Protection
  /v1/admin/dataprotection/templates/{templatename}:
    delete:
      consumes:
      - application/json
      description: Remove a template by name
      parameters:
      - description: Javelin API Key
        in: header
        name: x-api-key
        required: true
        type: string
      - description: Template Name
        in: path
        name: templatename
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Template not found
          schema:
            type: string
        "500":
          description: Failed to delete template
          schema:
            type: string
      summary: Delete a template
      tags:
      - Data Protection
    get:
      consumes:
      - application/json
      description: Retrieve details of a specific template by name
      parameters:
      - description: Javelin API Key
        in: header
        name: x-api-key
        required: true
        type: string
      - description: Template Name
        in: path
        name: templatename
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Template'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Template not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a specific template
      tags:
      - Data Protection
    put:
      consumes:
      - application/json
      description: Update details of an existing template
      parameters:
      - description: Javelin API Key
        in: header
        name: x-api-key
        required: true
        type: string
      - description: Template Name
        in: path
        name: templatename
        required: true
        type: string
      - description: Template details
        in: body
        name: template
        required: true
        schema:
          $ref: '#/definitions/model.Template'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "404":
          description: Template not found
          schema:
            type: string
        "500":
          description: Failed to update template
          schema:
            type: string
      summary: Update a template
      tags:
      - Data Protection
  /v1/admin/gateways:
    get:
      description: List all gateways
      parameters:
      - description: Javelin API Key
        in: header
        name: x-api-key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Gateway'
        "400":
          description: Invalid request
          schema:
            type: string
        "404":
          description: No gateways found
          schema:
            type: string
        "500":
          description: Failed to list gateways
          schema:
            type: string
      summary: List all gateways
      tags:
      - Gateways
    post:
      consumes:
      - application/json
      description: Create a new gateway
      parameters:
      - description: Javelin API Key
        in: header
        name: x-api-key
        required: true
        type: string
      - description: Gateway
        in: body
        name: gateway
        required: true
        schema:
          $ref: '#/definitions/model.Gateway'
      produces:
      - application/json
      responses:
        "200":
          description: Gateway created successfully
          schema:
            type: string
        "400":
          description: Gateway already exists
          schema:
            type: string
        "500":
          description: Failed to create gateway
          schema:
            type: string
      summary: Create a new gateway
      tags:
      - Gateways
  /v1/admin/gateways/{gatewayname}:
    delete:
      description: Delete a gateway by name
      parameters:
      - description: Javelin API Key
        in: header
        name: x-api-key
        required: true
        type: string
      - description: Gateway Name
        in: path
        name: gatewayname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Gateway deleted successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "404":
          description: Gateway not found
          schema:
            type: string
        "500":
          description: Failed to delete gateway
          schema:
            type: string
      summary: Delete a gateway by name
      tags:
      - Gateways
    get:
      description: Get a gateway by name
      parameters:
      - description: Javelin API Key
        in: header
        name: x-api-key
        required: true
        type: string
      - description: Gateway Name
        in: path
        name: gatewayname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Gateway'
        "400":
          description: Invalid request"}
          schema:
            type: string
        "404":
          description: Gateway not found"}
          schema:
            type: string
      summary: Get a gateway by name
      tags:
      - Gateways
    put:
      consumes:
      - application/json
      description: Update an existing gateway
      parameters:
      - description: Javelin API Key
        in: header
        name: x-api-key
        required: true
        type: string
      - description: Gateway Name
        in: path
        name: gatewayname
        required: true
        type: string
      - description: Gateway
        in: body
        name: gateway
        required: true
        schema:
          $ref: '#/definitions/model.Gateway'
      produces:
      - application/json
      responses:
        "200":
          description: Gateway updated successfully
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Failed to update gateway
          schema:
            type: string
      summary: Update an existing gateway
      tags:
      - Gateways
  /v1/admin/providers:
    get:
      consumes:
      - application/json
      description: Get a list of all providers
      parameters:
      - description: Javelin API Key
        in: header
        name: x-api-key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Provider'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: No providers found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: List all providers
      tags:
      - Providers
    post:
      consumes:
      - application/json
      description: Add a new provider with the specified details
      parameters:
      - description: Javelin API Key
        in: header
        name: x-api-key
        required: true
        type: string
      - description: Provider details
        in: body
        name: provider
        required: true
        schema:
          $ref: '#/definitions/model.Provider'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Failed to create provider
          schema:
            type: string
      summary: Create a new provider
      tags:
      - Providers
  /v1/admin/providers/{providername}:
    delete:
      consumes:
      - application/json
      description: Remove a provider by name
      parameters:
      - description: Javelin API Key
        in: header
        name: x-api-key
        required: true
        type: string
      - description: Provider Name
        in: path
        name: providername
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Provider not found
          schema:
            type: string
        "500":
          description: Failed to delete provider
          schema:
            type: string
      summary: Delete a provider
      tags:
      - Providers
    get:
      consumes:
      - application/json
      description: Retrieve a specific provider by name
      parameters:
      - description: Javelin API Key
        in: header
        name: x-api-key
        required: true
        type: string
      - description: Provider Name
        in: path
        name: providername
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Provider'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Provider not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a specific provider
      tags:
      - Providers
    put:
      consumes:
      - application/json
      description: Update an existing provider
      parameters:
      - description: Javelin API Key
        in: header
        name: x-api-key
        required: true
        type: string
      - description: Provider Name
        in: path
        name: providername
        required: true
        type: string
      - description: Provider details
        in: body
        name: provider
        required: true
        schema:
          $ref: '#/definitions/model.Provider'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Failed to update provider
          schema:
            type: string
      summary: Update a provider
      tags:
      - Providers
  /v1/admin/providers/{providername}/secrets/{keyname}:
    delete:
      consumes:
      - application/json
      description: Delete an API key by name
      parameters:
      - description: Javelin API Key
        in: header
        name: x-api-key
        required: true
        type: string
      - description: Namespace
        in: header
        name: x-javelin-namespace
        required: true
        type: string
      - description: Provider Name
        in: path
        name: providername
        required: true
        type: string
      - description: Key Name
        in: path
        name: keyname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Failed to delete Key
          schema:
            type: string
      summary: Delete an API key
      tags:
      - Secrets
    get:
      consumes:
      - application/json
      description: Retrieve a specific API key by name
      parameters:
      - description: Javelin API Key
        in: header
        name: x-api-key
        required: true
        type: string
      - description: Namespace
        in: header
        name: x-javelin-namespace
        required: true
        type: string
      - description: Provider Name
        in: path
        name: providername
        required: true
        type: string
      - description: Key Name
        in: path
        name: keyname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.APIKey'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Key not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a specific API key
      tags:
      - Secrets
    post:
      consumes:
      - application/json
      description: Create a new API key with the specified details
      parameters:
      - description: Javelin API Key
        in: header
        name: x-api-key
        required: true
        type: string
      - description: Namespace
        in: header
        name: x-javelin-namespace
        required: true
        type: string
      - description: Provider Name
        in: path
        name: providername
        required: true
        type: string
      - description: Key Name
        in: path
        name: keyname
        required: true
        type: string
      - description: API Key details
        in: body
        name: apikey
        required: true
        schema:
          $ref: '#/definitions/model.APIKey'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Failed to create key
          schema:
            type: string
      summary: Create a new API key
      tags:
      - Secrets
    put:
      consumes:
      - application/json
      description: Update an existing API key
      parameters:
      - description: Javelin API Key
        in: header
        name: x-api-key
        required: true
        type: string
      - description: Namespace
        in: header
        name: x-javelin-namespace
        required: true
        type: string
      - description: Provider Name
        in: path
        name: providername
        required: true
        type: string
      - description: Key Name
        in: path
        name: keyname
        required: true
        type: string
      - description: API Key details
        in: body
        name: apikey
        required: true
        schema:
          $ref: '#/definitions/model.APIKey'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Failed to update apikey
          schema:
            type: string
      summary: Update an API key
      tags:
      - Secrets
  /v1/admin/providers/secrets/keys:
    get:
      consumes:
      - application/json
      description: List all API keys
      parameters:
      - description: Javelin API Key
        in: header
        name: x-api-key
        required: true
        type: string
      - description: Namespace
        in: header
        name: x-javelin-namespace
        required: true
        type: string
      - description: Provider Name
        in: path
        name: providername
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.APIKey'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: No key found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: List API keys
      tags:
      - Secrets
  /v1/admin/routes:
    get:
      consumes:
      - application/json
      description: Get a list of all routes by filter
      parameters:
      - description: Javelin API Key
        in: header
        name: x-api-key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Route'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: No routes found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: List all routes by filter
      tags:
      - Routes
    post:
      consumes:
      - application/json
      description: Add a new route with the specified details
      parameters:
      - description: Javelin API Key
        in: header
        name: x-api-key
        required: true
        type: string
      - description: Route details
        in: body
        name: route
        required: true
        schema:
          $ref: '#/definitions/model.Route'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Failed to create route
          schema:
            type: string
      summary: Create a new route
      tags:
      - Routes
  /v1/admin/routes/{routename}:
    delete:
      consumes:
      - application/json
      description: Remove a route by name
      parameters:
      - description: Javelin API Key
        in: header
        name: x-api-key
        required: true
        type: string
      - description: Route Name
        in: path
        name: routename
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Route not found
          schema:
            type: string
        "500":
          description: Failed to delete route
          schema:
            type: string
      summary: Delete a route
      tags:
      - Routes
    get:
      consumes:
      - application/json
      description: Retrieve a specific route by name
      parameters:
      - description: Javelin API Key
        in: header
        name: x-api-key
        required: true
        type: string
      - description: Route Name
        in: path
        name: routename
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Route'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Route not found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a specific route
      tags:
      - Routes
    put:
      consumes:
      - application/json
      description: Update an existing route
      parameters:
      - description: Javelin API Key
        in: header
        name: x-api-key
        required: true
        type: string
      - description: Route Name
        in: path
        name: routename
        required: true
        type: string
      - description: Route details
        in: body
        name: route
        required: true
        schema:
          $ref: '#/definitions/model.Route'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseMessage'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "500":
          description: Failed to update route
          schema:
            type: string
      summary: Update a route
      tags:
      - Routes
  /query/{routename}:
    post:
      consumes:
      - application/json
      description: Query data for a specific route
      parameters:
      - description: Route name
        in: path
        name: routename
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Query response
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Query a Route
      tags:
      - Query Routes
swagger: "2.0"
