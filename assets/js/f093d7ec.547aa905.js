"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2966],{5680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>g});var r=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(t),m=a,g=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return t?r.createElement(g,i(i({ref:n},u),{},{components:t})):r.createElement(g,i({ref:n},u))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3973:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=t(8168),a=(t(6540),t(5680));const o={},i="Custom Guardrails",s={unversionedId:"javelin-processors/custom",id:"javelin-processors/custom",title:"Custom Guardrails",description:"Javelin can be extended with custom guardrails to enable additional functionality. Custom guardrails can be used to perform custom operations on the input data before it is sent to the model or on the output data before it is returned to the user. Custom guardrails can also be used to implement custom data transformations, data validation, data augmentation, and more.",source:"@site/docs/javelin-processors/custom.md",sourceDirName:"javelin-processors",slug:"/javelin-processors/custom",permalink:"/docs/javelin-processors/custom",draft:!1,editUrl:"https://github.com/getjavelin/documentation/tree/main/docs/javelin-processors/custom.md",tags:[],version:"current",frontMatter:{},sidebar:"someSidebar",previous:{title:"Hallucination Detection",permalink:"/docs/javelin-processors/hallucination"},next:{title:"Quickstart Guide",permalink:"/docs/javelin-python/quickstart"}},c={},l=[{value:"Custom Processor Interface",id:"custom-processor-interface",level:2}],u={toc:l},p="wrapper";function d(e){let{components:n,...t}=e;return(0,a.yg)(p,(0,r.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"custom-guardrails"},"Custom Guardrails"),(0,a.yg)("p",null,"Javelin can be extended with custom guardrails to enable additional functionality. Custom guardrails can be used to perform custom operations on the input data before it is sent to the model or on the output data before it is returned to the user. Custom guardrails can also be used to implement custom data transformations, data validation, data augmentation, and more. "),(0,a.yg)("p",null,"Javelin executes a processor chain configured as a directed acyclic graph(DAG) of processors. Each processor in the chain is a self-contained module designed to perform a specific function. The processors are arranged in a sequence to facilitate complex processing sequences and ensure the execution flow is efficient, logical, and adaptable to various enterprise needs. "),(0,a.yg)("p",null,"There are 2 components to building custom guardrails in Javelin:"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"Extension Processor"),(0,a.yg)("li",{parentName:"ol"},"Custom Guardrail Service")),(0,a.yg)("p",null,"When incorporating custom guardrails, you will need to configure a special 'extension_processor' that will call the custom guardrail. The extension_processor is configured in Javelin's request or response chain to execute the custom guardrail and the GRPC endpoint for the custom guardrail is configured as input in the extension_processor configuration. "),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},(0,a.yg)("strong",{parentName:"p"},"Tip:")," Custom guardrail endpoints should be implemented as GRPC services and configured in javelin for low latency and high throughput.")),(0,a.yg)("p",null,"The extension_processor provides a convenient and flexible GRPC interface that allows you to implement custom guardrails in any language that supports GRPC. The extension_processor can be configured to call the custom guardrail service over GRPC."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},"    +---------+\n    | Javelin |\n    +---------+\n        |\n        v\n    +---------------------------------+\n    | +-----------+     +-----------+ |\n    | | Processor | --\x3e | Processor | |\n    | +-----------+     +-----------+ |\n    |        |              |         |\n    |        v              v         |\n    |    +--------------------------+ |\n    |    |    Extension_Processor   | |\n    |    +--------------------------+ |\n    +---------------------------------+\n                     |\n                     | GRPC\n                     v\n        +--------------------------+\n        | Custom Guardrail Service |\n        +--------------------------+\n")),(0,a.yg)("h2",{id:"custom-processor-interface"},"Custom Processor Interface"),(0,a.yg)("p",null,"The GRPC interface consists of the following methods (.proto):"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go"},'    // Sample interface (for most recent interface please refer to the latest .proto file)\n    syntax = "proto3";\n\n    package test_plugin;\n\n    // Specify the Go package where the generated files should reside\n    option go_package = "javelin-core/pkg/chainprocessor/processor-sdk/api";\n\n    // Define the Guardrail service\n    service Guardrail {\n        // Link the RPC method to the correct request and response message types\n        rpc Evaluate(GuardrailRequest) returns (GuardrailResponse) {}\n    }\n\n    // Enum for different content types\n    enum ContentType {\n        CONTENT_TYPE_UNSPECIFIED = 0;  // Default value if not specified\n        CONTENT_TYPE_JSON = 1;         // application/json\n        CONTENT_TYPE_RAW_TEXT = 2;     // text/plain\n        CONTENT_TYPE_EMBEDDINGS = 3;   // application/embeddings\n        CONTENT_TYPE_JPEG = 4;         // image/jpeg\n        CONTENT_TYPE_MP4 = 5;          // video/mp4\n    }\n\n    // GuardrailRequest message contains content type, payload, headers, config, \n    // and media data.\n    message GuardrailRequest {\n        // Type of the media (e.g., "text/json", "text/raw", "image/jpeg", "video/mp4")\n        ContentType content_type = 1;\n\n        // Dictionary of body entries\n        map<string, string> input_body = 2;\n\n        // Dictionary of configuration entries\n        map<string, string> config = 3;\n        \n        // Dictionary of header entries\n        map<string, string> headers = 4;\n\n        // Binary data for images or videos\n        bytes input_media = 5;\n    }\n\n    // GuardrailResponse message contains transformed content type, \n    // body, response metadata, instructions, and media data.\n    message GuardrailResponse {\n        // Dictionary of transformed body entries\n        map<string, string> transformed_body = 1;\n\n        // Dictionary of response metadata\n        map<string, string> response_metadata = 2;\n\n        // Dictionary of header entries\n        map<string, string> headers = 3;\n\n        // Transformed binary data for images or videos\n        bytes transformed_media = 4;\n    }\n\n')),(0,a.yg)("p",null,"Custom guardrails can be implemented in any language and are ideally expected to be hosted/deployed in the same cluster that is running Javelin for low latency access. The custom processor should implement the ",(0,a.yg)("inlineCode",{parentName:"p"},"Guardrail")," service defined in the ",(0,a.yg)("inlineCode",{parentName:"p"},".proto")," file. "),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"Evaluate")," method should take a ",(0,a.yg)("inlineCode",{parentName:"p"},"GuardrailRequest")," as input and return a ",(0,a.yg)("inlineCode",{parentName:"p"},"GuardrailResponse")," as output."))}d.isMDXComponent=!0}}]);