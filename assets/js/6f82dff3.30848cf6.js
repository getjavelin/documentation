"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6898],{36131:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>h});let r=JSON.parse('{"id":"javelin-python/javelinclient","title":"JavelinClient","description":"JavelinClient class is designed to support both synchronous and asynchronous context managers. This means you can use the JavelinClient within a with statement to ensure resources are properly managed.","source":"@site/docs/javelin-python/javelinclient.md","sourceDirName":"javelin-python","slug":"/javelin-python/javelinclient","permalink":"/javelin-python/javelinclient","draft":false,"unlisted":false,"editUrl":"https://github.com/getjavelin/documentation/tree/main/docs/javelin-python/javelinclient.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Data Model","permalink":"/javelin-python/models"},"next":{"title":"Exceptions","permalink":"/javelin-python/exceptions"}}');var t=s(74848),i=s(28453),o=s(78667);let l={},c="JavelinClient",d={},h=[{value:"<strong>Synchronous Methods</strong>",id:"synchronous-methods",level:3},{value:"<code>__init__(self, base_url: str, api_key: Optional[str] = None) -&gt; None</code>",id:"init",level:4},{value:"<code>client</code>",id:"client",level:4},{value:"<code>aclient</code>",id:"aclient",level:4},{value:"<code>__enter__(self) -&gt; &quot;JavelinClient&quot;</code>",id:"__enter__self---javelinclient",level:4},{value:"<code>__exit__(self, exc_type, exc_val, exc_tb) -&gt; None</code>",id:"__exit__self-exc_type-exc_val-exc_tb---none",level:4},{value:"<code>close(self)</code>",id:"closeself",level:4},{value:"<code>get_route(self, route_name: str) -&gt; Route</code>",id:"get_routeself-route_name-str---route",level:4},{value:"<code>create_route(self, route: Route) -&gt; str</code>",id:"create_routeself-route-route---str",level:4},{value:"<code>update_route(self, route: Route) -&gt; str</code>",id:"update_routeself-route-route---str",level:4},{value:"<code>list_routes(self) -&gt; Routes</code>",id:"list_routesself---routes",level:4},{value:"<code>query_route(self, route_name: str, query_body: Dict[str, Any]) -&gt; QueryResponse</code>",id:"query_routeself-route_name-str-query_body-dictstr-any---queryresponse",level:4},{value:"<strong>Asynchronous Methods</strong>",id:"asynchronous-methods",level:3},{value:"<code>__init__(self, base_url: str, api_key: Optional[str] = None) -&gt; None</code>",id:"__init__self-base_url-str-api_key-optionalstr--none---none",level:4},{value:"<code>aget_route(self, route_name: str) -&gt; Route</code>",id:"aget_routeself-route_name-str---route",level:4},{value:"<code>acreate_route(self, route: Route) -&gt; str</code>",id:"acreate_routeself-route-route---str",level:4},{value:"<code>aupdate_route(self, route: Route) -&gt; str</code>",id:"aupdate_routeself-route-route---str",level:4},{value:"<code>alist_routes(self) -&gt; Routes</code>",id:"alist_routesself---routes",level:4},{value:"<code>aquery_route(self, route_name: str, query_body: Dict[str, Any]) -&gt; QueryResponse</code>",id:"aquery_routeself-route_name-str-query_body-dictstr-any---queryresponse",level:4},{value:"<code>adelete_route(self, route_name: str) -&gt; str</code>",id:"adelete_routeself-route_name-str---str",level:4}];function a(e){let n={br:"br",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"javelinclient",children:"JavelinClient"})}),"\n",(0,t.jsx)(n.p,{children:"JavelinClient class is designed to support both synchronous and asynchronous context managers. This means you can use the JavelinClient within a with statement to ensure resources are properly managed."}),"\n",(0,t.jsx)(n.p,{children:"The JavelinClient instance can be used as either a synchronous or asynchronous context manager. When entering a with block, it returns the client itself and when finished, it cleans up resources (like closing any open connections) when exiting a 'with' or 'async with' block respectively."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Synchronous Client Example:"})}),"\n",(0,t.jsx)(o.A,{language:"python",children:`
with JavelinClient(JavelinConfig(base_url="localhost:8000")) as client:
    # use the client for synchronous operations
    ...
`}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Asynchronous Client Example:"})}),"\n",(0,t.jsx)(o.A,{language:"python",children:`
async with JavelinClient(JavelinConfig(base_url="localhost:8000")) as client:
    # use the client for asynchronous operations
    ...
`}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"synchronous-methods",children:(0,t.jsx)(n.strong,{children:"Synchronous Methods"})}),"\n",(0,t.jsx)(n.h4,{id:"init",children:(0,t.jsx)(n.code,{children:"__init__(self, base_url: str, api_key: Optional[str] = None) -> None"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),":",(0,t.jsx)(n.br,{}),"\n","Initializes the JavelinClient."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"base_url"}),": Base URL for the Javelin API."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"api_key"})," (optional): API key for authorization (if required)."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":",(0,t.jsx)(n.br,{}),"\n","None."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h4,{id:"client",children:(0,t.jsx)(n.code,{children:"client"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),":",(0,t.jsx)(n.br,{}),"\n","Property that returns an HTTP client for synchronous operations. If the client does not exist, it creates and initializes one."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":",(0,t.jsx)(n.br,{}),"\n","An instance of ",(0,t.jsx)(n.code,{children:"httpx.Client"})," initialized with the base URL, headers, and a specific timeout."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h4,{id:"aclient",children:(0,t.jsx)(n.code,{children:"aclient"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),":",(0,t.jsx)(n.br,{}),"\n","Property that returns an HTTP client for asynchronous operations. If the client does not exist, it creates and initializes one."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":",(0,t.jsx)(n.br,{}),"\n","An instance of ",(0,t.jsx)(n.code,{children:"httpx.AsyncClient"})," initialized with the base URL, headers, and a specific timeout."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h4,{id:"__enter__self---javelinclient",children:(0,t.jsx)(n.code,{children:'__enter__(self) -> "JavelinClient"'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),":",(0,t.jsx)(n.br,{}),"\n","Enter the runtime context for the synchronous client and returns itself."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":",(0,t.jsx)(n.br,{}),"\n","The instance of the JavelinClient."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h4,{id:"__exit__self-exc_type-exc_val-exc_tb---none",children:(0,t.jsx)(n.code,{children:"__exit__(self, exc_type, exc_val, exc_tb) -> None"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),":",(0,t.jsx)(n.br,{}),"\n","Exit the runtime context for the synchronous client."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"exc_type"}),": The type of exception."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"exc_val"}),": The exception instance."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"exc_tb"}),": The traceback object."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":",(0,t.jsx)(n.br,{}),"\n","None."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h4,{id:"closeself",children:(0,t.jsx)(n.code,{children:"close(self)"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),":",(0,t.jsx)(n.br,{}),"\n","Closes the synchronous client if it exists."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":",(0,t.jsx)(n.br,{}),"\n","None."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h4,{id:"get_routeself-route_name-str---route",children:(0,t.jsx)(n.code,{children:"get_route(self, route_name: str) -> Route"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),": Retrieves the details of a specific route given its name."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"route_name"})," : Name of the route to retrieve."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Route"}),": The route object."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h4,{id:"create_routeself-route-route---str",children:(0,t.jsx)(n.code,{children:"create_route(self, route: Route) -> str"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),": Creates a new route based on the provided route object."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"route"})," : Route object with details for creation."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"str"}),': "OK" if the Route was created successfully']}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h4,{id:"update_routeself-route-route---str",children:(0,t.jsx)(n.code,{children:"update_route(self, route: Route) -> str"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),": Updates an existing route based on the provided route object."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"route"})," (Route): Route object with updated details."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"str"}),": Confirmation message or ID of the updated route."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h4,{id:"list_routesself---routes",children:(0,t.jsx)(n.code,{children:"list_routes(self) -> Routes"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),": Lists all available routes."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Routes"}),": A collection of route objects."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h4,{id:"query_routeself-route_name-str-query_body-dictstr-any---queryresponse",children:(0,t.jsx)(n.code,{children:"query_route(self, route_name: str, query_body: Dict[str, Any]) -> QueryResponse"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),": Queries a specific route based on the given query parameters."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"route_name"})," (str): Name of the route to query."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"query_body"})," (Dict[str, Any]): Dictionary containing query parameters."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"asynchronous-methods",children:(0,t.jsx)(n.strong,{children:"Asynchronous Methods"})}),"\n",(0,t.jsx)(n.h4,{id:"__init__self-base_url-str-api_key-optionalstr--none---none",children:(0,t.jsx)(n.code,{children:"__init__(self, base_url: str, api_key: Optional[str] = None) -> None"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),":",(0,t.jsx)(n.br,{}),"\n","Initializes the client with the provided base URL and an optional API key."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"base_url"}),": The base URL of the service or API endpoint."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"api_key"})," (optional): The authentication key used to access the service. If not provided, the client may operate in an unauthenticated mode or utilize other means of authentication."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":",(0,t.jsx)(n.br,{}),"\n","None. This method initializes the client instance."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h4,{id:"aget_routeself-route_name-str---route",children:(0,t.jsx)(n.code,{children:"aget_route(self, route_name: str) -> Route"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),": Asynchronously retrieves the details of a specific route given its name."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"route_name"})," (str): Name of the route to retrieve."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Route"}),": The route object."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h4,{id:"acreate_routeself-route-route---str",children:(0,t.jsx)(n.code,{children:"acreate_route(self, route: Route) -> str"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),": Asynchronously creates a new route based on the provided route object."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"route"})," (Route): Route object with details for creation."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"str"}),": Confirmation message or ID of the created route."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h4,{id:"aupdate_routeself-route-route---str",children:(0,t.jsx)(n.code,{children:"aupdate_route(self, route: Route) -> str"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),": Asynchronously updates an existing route based on the provided route object."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"route"})," (Route): Route object with updated details."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"str"}),": Confirmation message or ID of the updated route."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h4,{id:"alist_routesself---routes",children:(0,t.jsx)(n.code,{children:"alist_routes(self) -> Routes"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),": Asynchronously lists all available routes."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Routes"}),": A collection of route objects."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h4,{id:"aquery_routeself-route_name-str-query_body-dictstr-any---queryresponse",children:(0,t.jsx)(n.code,{children:"aquery_route(self, route_name: str, query_body: Dict[str, Any]) -> QueryResponse"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),": Asynchronously queries a specific route based on the given query parameters."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"route_name"})," (str): Name of the route to query."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"query_body"})," (Dict[str, Any]): Dictionary containing query parameters."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h4,{id:"adelete_routeself-route_name-str---str",children:(0,t.jsx)(n.code,{children:"adelete_route(self, route_name: str) -> str"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Description"}),": Asynchronously deletes a specific route based on its name."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"route_name"})," (str): Name of the route to delete."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"str"}),": Confirmation message or ID of the deleted route."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{})]})}function u(e={}){let{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);