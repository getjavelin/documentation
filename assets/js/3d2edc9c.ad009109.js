"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6574],{5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>y});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(t),d=r,y=p["".concat(s,".").concat(d)]||p[d]||m[d]||o;return t?a.createElement(y,l(l({ref:n},c),{},{components:t})):a.createElement(y,l({ref:n},c))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=t[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9365:(e,n,t)=>{t.d(n,{A:()=>l});var a=t(6540),r=t(53);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:n,hidden:t,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.A)(o.tabItem,l),hidden:t},n)}},1470:(e,n,t)=>{t.d(n,{A:()=>A});var a=t(8168),r=t(6540),o=t(53),l=t(3104),i=t(6347),s=t(7485),u=t(1682),c=t(9466);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}function m(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??p(t);return function(e){const n=(0,u.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function d(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function y(e){let{queryString:n=!1,groupId:t}=e;const a=(0,i.W6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s.aZ)(o),(0,r.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(a.location.search);n.set(o,e),a.replace({...a.location,search:n.toString()})}),[o,a])]}function h(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,o=m(e),[l,i]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!d({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:o}))),[s,u]=y({queryString:t,groupId:a}),[p,h]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,o]=(0,c.Dv)(t);return[a,(0,r.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:a}),g=(()=>{const e=s??p;return d({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{g&&i(g)}),[g]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),h(e)}),[u,h,o]),tabValues:o}}var g=t(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:n,block:t,selectedValue:i,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.a_)(),m=e=>{const n=e.currentTarget,t=c.indexOf(n),a=u[t].value;a!==i&&(p(n),s(a))},d=e=>{let n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":t},n)},u.map((e=>{let{value:n,label:t,attributes:l}=e;return r.createElement("li",(0,a.A)({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,key:n,ref:e=>c.push(e),onKeyDown:d,onClick:m},l,{className:(0,o.A)("tabs__item",f.tabItem,l?.className,{"tabs__item--active":i===n})}),t??n)})))}function b(e){let{lazy:n,children:t,selectedValue:a}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function _(e){const n=h(e);return r.createElement("div",{className:(0,o.A)("tabs-container",f.tabList)},r.createElement(v,(0,a.A)({},e,n)),r.createElement(b,(0,a.A)({},e,n)))}function A(e){const n=(0,g.A)();return r.createElement(_,(0,a.A)({key:String(n)},e))}},5208:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>y,frontMatter:()=>i,metadata:()=>u,toc:()=>p});var a=t(8168),r=(t(6540),t(5680)),o=t(1470),l=t(9365);const i={},s="Applications",u={unversionedId:"javelin-core/integration",id:"javelin-core/integration",title:"Applications",description:"Its easy to integration the applications that leverage LLMs with Javelin. We have made it easy to seamlessly connect your applications to route all LLM traffic through Javelin with zero code change.",source:"@site/docs/javelin-core/integration.md",sourceDirName:"javelin-core",slug:"/javelin-core/integration",permalink:"/docs/javelin-core/integration",draft:!1,editUrl:"https://github.com/getjavelin/documentation/tree/main/docs/javelin-core/integration.md",tags:[],version:"current",frontMatter:{},sidebar:"someSidebar",previous:{title:"Supported Large Language Models(LLMs)",permalink:"/docs/javelin-core/supported-llms"},next:{title:"Quickstart",permalink:"/docs/javelin-langchain-python/quickstart"}},c={},p=[{value:"Leveraging the Javelin Platform",id:"leveraging-the-javelin-platform",level:2},{value:"Querying an LLM",id:"querying-an-llm",level:2}],m={toc:p},d="wrapper";function y(e){let{components:n,...t}=e;return(0,r.yg)(d,(0,a.A)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"applications"},"Applications"),(0,r.yg)("p",null,"Its easy to integration the applications that leverage LLMs with Javelin. We have made it easy to seamlessly connect your applications to route all LLM traffic through Javelin with zero code change."),(0,r.yg)("h2",{id:"leveraging-the-javelin-platform"},"Leveraging the Javelin Platform"),(0,r.yg)("p",null,"Rather than having your LLM Applications (like Co-Pilot apps etc.,) individually & directly point to the LLM Vendor & Model (like OpenAI, Gemini etc.,), configure the provider/model endpoint to be your Javelin endpoint. This ensures that all applications that leverage AI Models will route their requests through the gateway. Javelin supports all the ",(0,r.yg)("a",{parentName:"p",href:"supported-llms"},"latest models and providers"),", so you don't have to make any changes to your application or how requests to models are sent. "),(0,r.yg)("p",null,"See ",(0,r.yg)("a",{parentName:"p",href:"../javelin-python/quickstart"},"Python SDK")," for details on how you can easily embed this within your AI Apps. "),(0,r.yg)("p",null,"See ",(0,r.yg)("a",{parentName:"p",href:"routeconfiguration"},"Javelin Configuration")," section, for details on how to setup routes on the gateway to different models and providers. "),(0,r.yg)("h2",{id:"querying-an-llm"},"Querying an LLM"),(0,r.yg)("p",null,"Javelin may send a request to one or more models based on the configured policies and route configurations and return back a response."),(0,r.yg)(o.A,{mdxType:"Tabs"},(0,r.yg)(l.A,{value:"shell",label:"curl",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},'curl -X POST \\\n-H "Content-Type: application/json" \\\n-H "x-api-key: $JAVELIN_API_KEY" \\\n-H "Authorization : Bearer $OPENAI_API_KEY" \\\n-d \'{\n  "messages": [\n    {\n      "role": "system",\n      "content": "Hello, you are a helpful scientific assistant"\n    },\n    {\n      "role": "user",\n      "content": "What is the chemical composition of sugar?"\n    }\n  ],\n  "temperature": 0.8\n}\' \\\n"https://api.javelin.live/v1/query/{routename}"\n'))),(0,r.yg)(l.A,{value:"py1",label:"JavelinSDK",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"pip install javelin-sdk\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-py"},'from javelin_sdk import (\n    JavelinClient,\n    Route\n)\n\nimport os\n\njavelin_api_key = os.getenv(\'JAVELIN_API_KEY\')\nllm_api_key = os.getenv("OPENAI_API_KEY")\n\n# create javelin client\nclient = JavelinClient(javelin_api_key=javelin_api_key, \n                       llm_api_key=llm_api_key)\n\n# route name to get is {routename} e.g., sampleroute1\nquery_data = {\n    "messages": [ \n        {\n            "role": "system",\n            "content": "Hello, you are a helpful scientific assistant"\n        },\n        {\n            "role": "user",\n            "content": "What is the chemical composition of sugar?"\n        }\n    ],\n    "temperature": 0.8,\n}\n\n# now query the route, for async use `await client.aquery_route("sampleroute1", query_data)`\nresponse = client.query_route("sampleroute1", query_data)\nprint(response.model_dump_json(indent=2))\n\n'))),(0,r.yg)(l.A,{value:"py2",label:"OpenAI",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"pip install openai\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-py"},'from openai import OpenAI\nimport os\n\njavelin_api_key = os.environ[\'JAVELIN_API_KEY\']\nllm_api_key = os.environ["OPENAI_API_KEY"]\n\n# Javelin Headers\njavelin_headers = {\n                    "x-javelin-route": "sampleroute1", # route name configured for OpenAI\n                    "x-api-key": javelin_api_key       # virtual API Key for LLM provider keys\n                  }\n\n# Create OpenAI Client\nclient = OpenAI(api_key=llm_api_key,\n                base_url="https://api.javelin.live/v1/query",\n                default_headers=javelin_headers)\n\n# Query the model\ncompletion = client.chat.completions.create(\n  model="gpt-3.5-turbo",\n  messages=[\n    {"role": "system", "content": "Hello, you are a helpful scientific assistant"},\n    {"role": "user", "content": "What is the chemical composition of sugar?"}\n  ])\n\nprint(completion.model_dump_json(indent=2))\n\n# Streaming Responses\nstream = client.chat.completions.create(\n    model="gpt-3.5-turbo",\n    messages=[\n      {"role": "system", "content": "You are a helpful assistant."},\n      {"role": "user", "content": "What is the chemical composition of sugar?"}\n    ],\n    stream=True,\n)\n\nfor chunk in stream:\n    print(chunk.choices[0].delta.content or "", end="")\n\n'))),(0,r.yg)(l.A,{value:"py3",label:"Azure OpenAI",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell\x3c!--"},"pip install openai\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-py"},'from openai import AzureOpenAI\nimport os\n\n# Javelin Headers\njavelin_api_key = os.environ[\'JAVELIN_API_KEY\']\nllm_api_key = os.environ["AZURE_OPENAI_API_KEY"]\n\njavelin_headers = {\n                    "x-javelin-route": "sampleroute1", # route name configured for OpenAI\n                    "x-api-key": javelin_api_key       # virtual API Key for LLM provider keys\n                  }\n\nclient = AzureOpenAI(api_key=llm_api_key,\n                     base_url="https://api.javelin.live/v1/query",\n                     default_headers=javelin_headers,\n                     api_version="2023-07-01-preview")\n\ncompletion = client.chat.completions.create(\n  model="gpt-3.5-turbo",\n  messages=[\n    {"role": "system", "content": "Hello, you are a helpful scientific assistant"},\n    {"role": "user", "content": "What is the chemical composition of sugar?"}\n  ]\n)\n\nprint(completion.model_dump_json(indent=2))\n\n# Streaming Responses\nstream = client.chat.completions.create(\n    model="gpt-3.5-turbo",\n    messages=[\n      {"role": "system", "content": "You are a helpful assistant."},\n      {"role": "user", "content": "What is the chemical composition of sugar?"}\n    ],\n    stream=True,\n)\n\nfor chunk in stream:\n  if chunk.choices:\n    print(chunk.choices[0].delta.content or "", end="")\n\n'))),(0,r.yg)(l.A,{value:"py4",label:"LangChain",mdxType:"TabItem"},(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-py"},'from openai import OpenAI\nfrom langchain_openai import ChatOpenAI\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langchain_core.output_parsers import StrOutputParser\n\nimport os\n\njavelin_api_key = os.getenv(\'JAVELIN_API_KEY\')\nllm_api_key = os.getenv("OPENAI_API_KEY")\njavelin_headers = {\n                    "x-api-key": javelin_api_key,\n                    "x-javelin-route": "openai", # route name configured for OpenAI\n                  }\n\nllm = ChatOpenAI(\n    openai_api_key=llm_api_key,\n    model_kwargs={\n      "extra_headers": javelin_headers\n    },\n    openai_api_base="https://api.javelin.live/v1/query",\n)\n\nprompt = ChatPromptTemplate.from_messages([\n    ("system", "You are a helpful assistant."),\n    ("user", "{input}")\n])\n\noutput_parser = StrOutputParser()\n\nchain = prompt | llm | output_parser\n\nprint(chain.invoke({"input": "What is the chemical composition of sugar?"}))\n')))))}y.isMDXComponent=!0}}]);