"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7564],{71730:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"javelin-python/api-reference","title":"API Reference","description":"Overview","source":"@site/docs/javelin-python/api-reference.md","sourceDirName":"javelin-python","slug":"/javelin-python/api-reference","permalink":"/javelin-python/api-reference","draft":false,"unlisted":false,"editUrl":"https://github.com/getjavelin/documentation/tree/main/docs/javelin-python/api-reference.md","tags":[],"version":"current","frontMatter":{}}');var t=s(74848),o=s(28453);const i={},l="API Reference",d={},c=[{value:"Overview",id:"overview",level:2},{value:"class JavelinClient:",id:"class-javelinclient",level:2},{value:"<strong>Synchronous Methods</strong>",id:"synchronous-methods",level:3},{value:"<code>close(self)</code>",id:"closeself",level:4},{value:"<code>get_route(self, route_name: str) -&gt; Route</code>",id:"get_routeself-route_name-str---route",level:4},{value:"<code>create_route(self, route: Route) -&gt; str</code>",id:"create_routeself-route-route---str",level:4},{value:"<code>update_route(self, route: Route) -&gt; str</code>",id:"update_routeself-route-route---str",level:4},{value:"<code>list_routes(self) -&gt; Routes</code>",id:"list_routesself---routes",level:4},{value:"<code>query_route(self, route_name: str, query_body: Dict[str, Any]) -&gt; QueryResponse</code>",id:"query_routeself-route_name-str-query_body-dictstr-any---queryresponse",level:4},{value:"<strong>Asynchronous Methods</strong>",id:"asynchronous-methods",level:3},{value:"<code>aclose(self)</code>",id:"acloseself",level:4},{value:"<code>aget_route(self, route_name: str) -&gt; Route</code>",id:"aget_routeself-route_name-str---route",level:4},{value:"<code>acreate_route(self, route: Route) -&gt; str</code>",id:"acreate_routeself-route-route---str",level:4},{value:"<code>aupdate_route(self, route: Route) -&gt; str</code>",id:"aupdate_routeself-route-route---str",level:4},{value:"<code>alist_routes(self) -&gt; Routes</code>",id:"alist_routesself---routes",level:4},{value:"<code>aquery_route(self, route_name: str, query_body: Dict[str, Any]) -&gt; QueryResponse</code>",id:"aquery_routeself-route_name-str-query_body-dictstr-any---queryresponse",level:4},{value:"<code>adelete_route(self, route_name: str) -&gt; str</code>",id:"adelete_routeself-route_name-str---str",level:4},{value:"JavelinClientError",id:"javelinclienterror",level:3},{value:"<code>__init__(self, message: str, response: Optional[Response] = None) -&gt; None</code>",id:"__init__self-message-str-response-optionalresponse--none---none",level:4},{value:"<code>__str__(self)</code>",id:"__str__self",level:4},{value:"Derived Exceptions",id:"derived-exceptions",level:3},{value:"<code>NetworkError</code>",id:"networkerror",level:4},{value:"<code>RouteNotFoundError</code>",id:"routenotfounderror",level:4},{value:"<code>RateLimitExceededError</code>",id:"ratelimitexceedederror",level:4},{value:"<code>RouteAlreadyExistsError</code>",id:"routealreadyexistserror",level:4},{value:"<code>InternalServerError</code>",id:"internalservererror",level:4},{value:"<code>MethodNotAllowedError</code>",id:"methodnotallowederror",level:4},{value:"<code>UnauthorizedError</code>",id:"unauthorizederror",level:4},{value:"<code>ValidationError</code>",id:"validationerror",level:4}];function a(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"api-reference",children:"API Reference"})}),"\n",(0,t.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(r.p,{children:"This API allows users to manage and query routes. Below you'll find both synchronous and asynchronous methods detailed separately."}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"class-javelinclient",children:"class JavelinClient:"}),"\n",(0,t.jsx)(r.h3,{id:"synchronous-methods",children:(0,t.jsx)(r.strong,{children:"Synchronous Methods"})}),"\n",(0,t.jsx)(r.h4,{id:"closeself",children:(0,t.jsx)(r.code,{children:"close(self)"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Description"}),": Closes the connection or resources associated with the object."]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h4,{id:"get_routeself-route_name-str---route",children:(0,t.jsx)(r.code,{children:"get_route(self, route_name: str) -> Route"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Description"}),": Retrieves the details of a specific route given its name."]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"route_name"})," : Name of the route to retrieve."]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"Route"}),": The route object."]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h4,{id:"create_routeself-route-route---str",children:(0,t.jsx)(r.code,{children:"create_route(self, route: Route) -> str"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Description"}),": Creates a new route based on the provided route object."]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"route"})," : Route object with details for creation."]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"str"}),': "OK" if the Route was created successfully']}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h4,{id:"update_routeself-route-route---str",children:(0,t.jsx)(r.code,{children:"update_route(self, route: Route) -> str"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Description"}),": Updates an existing route based on the provided route object."]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"route"})," (Route): Route object with updated details."]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"str"}),": Confirmation message or ID of the updated route."]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h4,{id:"list_routesself---routes",children:(0,t.jsx)(r.code,{children:"list_routes(self) -> Routes"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Description"}),": Lists all available routes."]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"Routes"}),": A collection of route objects."]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h4,{id:"query_routeself-route_name-str-query_body-dictstr-any---queryresponse",children:(0,t.jsx)(r.code,{children:"query_route(self, route_name: str, query_body: Dict[str, Any]) -> QueryResponse"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Description"}),": Queries a specific route based on the given query parameters."]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"route_name"})," (str): Name of the route to query."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"query_body"})," (Dict[str, Any]): Dictionary containing query parameters."]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"asynchronous-methods",children:(0,t.jsx)(r.strong,{children:"Asynchronous Methods"})}),"\n",(0,t.jsx)(r.h4,{id:"acloseself",children:(0,t.jsx)(r.code,{children:"aclose(self)"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Description"}),": Asynchronously closes the connection or resources associated with the object."]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h4,{id:"aget_routeself-route_name-str---route",children:(0,t.jsx)(r.code,{children:"aget_route(self, route_name: str) -> Route"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Description"}),": Asynchronously retrieves the details of a specific route given its name."]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"route_name"})," (str): Name of the route to retrieve."]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"Route"}),": The route object."]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h4,{id:"acreate_routeself-route-route---str",children:(0,t.jsx)(r.code,{children:"acreate_route(self, route: Route) -> str"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Description"}),": Asynchronously creates a new route based on the provided route object."]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"route"})," (Route): Route object with details for creation."]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"str"}),": Confirmation message or ID of the created route."]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h4,{id:"aupdate_routeself-route-route---str",children:(0,t.jsx)(r.code,{children:"aupdate_route(self, route: Route) -> str"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Description"}),": Asynchronously updates an existing route based on the provided route object."]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"route"})," (Route): Route object with updated details."]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"str"}),": Confirmation message or ID of the updated route."]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h4,{id:"alist_routesself---routes",children:(0,t.jsx)(r.code,{children:"alist_routes(self) -> Routes"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Description"}),": Asynchronously lists all available routes."]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"Routes"}),": A collection of route objects."]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h4,{id:"aquery_routeself-route_name-str-query_body-dictstr-any---queryresponse",children:(0,t.jsx)(r.code,{children:"aquery_route(self, route_name: str, query_body: Dict[str, Any]) -> QueryResponse"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Description"}),": Asynchronously queries a specific route based on the given query parameters."]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"route_name"})," (str): Name of the route to query."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"query_body"})," (Dict[str, Any]): Dictionary containing query parameters."]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h4,{id:"adelete_routeself-route_name-str---str",children:(0,t.jsx)(r.code,{children:"adelete_route(self, route_name: str) -> str"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Description"}),": Asynchronously deletes a specific route based on its name."]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Parameters"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"route_name"})," (str): Name of the route to delete."]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Returns"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"str"}),": Confirmation message or ID of the deleted route."]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"javelinclienterror",children:"JavelinClientError"}),"\n",(0,t.jsx)(r.p,{children:"A base exception class for the Javelin client."}),"\n",(0,t.jsx)(r.h4,{id:"__init__self-message-str-response-optionalresponse--none---none",children:(0,t.jsx)(r.code,{children:"__init__(self, message: str, response: Optional[Response] = None) -> None"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"message"}),": A string containing the error message."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"response"})," (Optional): A ",(0,t.jsx)(r.code,{children:"Response"})," object that may contain additional information about the error."]}),"\n"]}),"\n",(0,t.jsx)(r.h4,{id:"__str__self",children:(0,t.jsx)(r.code,{children:"__str__(self)"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Return type:"})," ",(0,t.jsx)(r.code,{children:"str"}),"\nReturns a string representation of the error."]}),"\n",(0,t.jsx)(r.h3,{id:"derived-exceptions",children:"Derived Exceptions"}),"\n",(0,t.jsx)(r.h4,{id:"networkerror",children:(0,t.jsx)(r.code,{children:"NetworkError"})}),"\n",(0,t.jsx)(r.p,{children:"Indicates a network-related error while communicating with the Javelin service."}),"\n",(0,t.jsx)(r.h4,{id:"routenotfounderror",children:(0,t.jsx)(r.code,{children:"RouteNotFoundError"})}),"\n",(0,t.jsx)(r.p,{children:"Indicates that a specified route was not found in the Javelin service."}),"\n",(0,t.jsx)(r.h4,{id:"ratelimitexceedederror",children:(0,t.jsx)(r.code,{children:"RateLimitExceededError"})}),"\n",(0,t.jsx)(r.p,{children:"Indicates that the rate limit for the Javelin service has been exceeded."}),"\n",(0,t.jsx)(r.h4,{id:"routealreadyexistserror",children:(0,t.jsx)(r.code,{children:"RouteAlreadyExistsError"})}),"\n",(0,t.jsx)(r.p,{children:"Indicates that an attempt was made to create a route that already exists in the Javelin service."}),"\n",(0,t.jsx)(r.h4,{id:"internalservererror",children:(0,t.jsx)(r.code,{children:"InternalServerError"})}),"\n",(0,t.jsx)(r.p,{children:"Indicates that the Javelin service encountered an internal server error."}),"\n",(0,t.jsx)(r.h4,{id:"methodnotallowederror",children:(0,t.jsx)(r.code,{children:"MethodNotAllowedError"})}),"\n",(0,t.jsx)(r.p,{children:"Indicates that an attempted method is not allowed on the specified route or resource."}),"\n",(0,t.jsx)(r.h4,{id:"unauthorizederror",children:(0,t.jsx)(r.code,{children:"UnauthorizedError"})}),"\n",(0,t.jsx)(r.p,{children:"Indicates that the client is not authorized to perform the attempted action on the Javelin service."}),"\n",(0,t.jsx)(r.h4,{id:"validationerror",children:(0,t.jsx)(r.code,{children:"ValidationError"})}),"\n",(0,t.jsx)(r.p,{children:"Indicates that there was a validation error with the provided data or request."}),"\n",(0,t.jsx)(r.p,{children:"models.py\nclass RouteConfig(BaseModel):\nFields:"}),"\n",(0,t.jsx)(r.p,{children:"rate_limit\nowner\norganization\narchive\nretries"}),"\n",(0,t.jsx)(r.p,{children:"class Model(BaseModel):\nFields:"}),"\n",(0,t.jsx)(r.p,{children:"name\nprovider\nsuffix"}),"\n",(0,t.jsx)(r.p,{children:"class Route(BaseModel):\nFields:"}),"\n",(0,t.jsx)(r.p,{children:"name\nmodel\nconfig"}),"\n",(0,t.jsx)(r.p,{children:"class Routes(BaseModel):\nFields:"}),"\n",(0,t.jsx)(r.p,{children:"routes"}),"\n",(0,t.jsx)(r.p,{children:"class Message(BaseModel):\nFields:"}),"\n",(0,t.jsx)(r.p,{children:"role\ncontent"}),"\n",(0,t.jsx)(r.p,{children:"class ResponseMetaData(BaseModel):\nFields:"}),"\n",(0,t.jsx)(r.p,{children:"route_name\nmodel\narchive_enabled\ninput_tokens\noutput_tokens\ntotal_tokens\nusage\nretries\nthrottled"}),"\n",(0,t.jsx)(r.p,{children:"class QueryResponse(BaseModel):\nFields:"}),"\n",(0,t.jsx)(r.p,{children:"llm_response\nmetadata"})]})}function h(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},28453:(e,r,s)=>{s.d(r,{R:()=>i,x:()=>l});var n=s(96540);const t={},o=n.createContext(t);function i(e){const r=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),n.createElement(o.Provider,{value:r},e.children)}}}]);