"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6898],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>d});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},y="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),y=u(n),c=a,d=y["".concat(s,".").concat(c)]||y[c]||g[c]||o;return n?r.createElement(d,l(l({ref:t},p),{},{components:n})):r.createElement(d,l({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[y]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2315:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=n(8168),a=(n(6540),n(5680));const o={},l="JavelinClient",i={unversionedId:"javelin-python/javelinclient",id:"javelin-python/javelinclient",title:"JavelinClient",description:"JavelinClient class is designed to support both synchronous and asynchronous context managers. This means you can use the JavelinClient within a with statement to ensure resources are properly managed.",source:"@site/docs/javelin-python/javelinclient.md",sourceDirName:"javelin-python",slug:"/javelin-python/javelinclient",permalink:"/docs/javelin-python/javelinclient",draft:!1,editUrl:"https://github.com/getjavelin/documentation/tree/main/docs/javelin-python/javelinclient.md",tags:[],version:"current",frontMatter:{},sidebar:"someSidebar",previous:{title:"Data Model",permalink:"/docs/javelin-python/models"},next:{title:"Exceptions",permalink:"/docs/javelin-python/exceptions"}},s={},u=[{value:"<strong>Synchronous Methods</strong>",id:"synchronous-methods",level:3},{value:"<code>__init__(self, base_url: str, api_key: Optional[str] = None) -&gt; None</code>",id:"init",level:4},{value:"<code>client</code>",id:"client",level:4},{value:"<code>aclient</code>",id:"aclient",level:4},{value:"<code>__enter__(self) -&gt; &quot;JavelinClient&quot;</code>",id:"__enter__self---javelinclient",level:4},{value:"<code>__exit__(self, exc_type, exc_val, exc_tb) -&gt; None</code>",id:"__exit__self-exc_type-exc_val-exc_tb---none",level:4},{value:"<code>close(self)</code>",id:"closeself",level:4},{value:"<code>get_route(self, route_name: str) -&gt; Route</code>",id:"get_routeself-route_name-str---route",level:4},{value:"<code>create_route(self, route: Route) -&gt; str</code>",id:"create_routeself-route-route---str",level:4},{value:"<code>update_route(self, route: Route) -&gt; str</code>",id:"update_routeself-route-route---str",level:4},{value:"<code>list_routes(self) -&gt; Routes</code>",id:"list_routesself---routes",level:4},{value:"<code>query_route(self, route_name: str, query_body: Dict[str, Any]) -&gt; QueryResponse</code>",id:"query_routeself-route_name-str-query_body-dictstr-any---queryresponse",level:4},{value:"<strong>Asynchronous Methods</strong>",id:"asynchronous-methods",level:3},{value:"<code>__init__(self, base_url: str, api_key: Optional[str] = None) -&gt; None</code>",id:"__init__self-base_url-str-api_key-optionalstr--none---none",level:4},{value:"<code>aget_route(self, route_name: str) -&gt; Route</code>",id:"aget_routeself-route_name-str---route",level:4},{value:"<code>acreate_route(self, route: Route) -&gt; str</code>",id:"acreate_routeself-route-route---str",level:4},{value:"<code>aupdate_route(self, route: Route) -&gt; str</code>",id:"aupdate_routeself-route-route---str",level:4},{value:"<code>alist_routes(self) -&gt; Routes</code>",id:"alist_routesself---routes",level:4},{value:"<code>aquery_route(self, route_name: str, query_body: Dict[str, Any]) -&gt; QueryResponse</code>",id:"aquery_routeself-route_name-str-query_body-dictstr-any---queryresponse",level:4},{value:"<code>adelete_route(self, route_name: str) -&gt; str</code>",id:"adelete_routeself-route_name-str---str",level:4}],p={toc:u},y="wrapper";function g(e){let{components:t,...n}=e;return(0,a.yg)(y,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"javelinclient"},"JavelinClient"),(0,a.yg)("p",null,"JavelinClient class is designed to support both synchronous and asynchronous context managers. This means you can use the JavelinClient within a with statement to ensure resources are properly managed.  "),(0,a.yg)("p",null,"The JavelinClient instance can be used as either a synchronous or asynchronous context manager. When entering a with block, it returns the client itself and when finished, it cleans up resources (like closing any open connections) when exiting a 'with' or 'async with' block respectively."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Synchronous Client Example:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'with JavelinClient(base_url="localhost:8000") as client:\n    # use the client for synchronous operations\n    ...\n')),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Asynchronous Client Example:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-python"},'async with JavelinClient(base_url="localhost:8000") as client:\n    # use the client for asynchronous operations\n    ...\n')),(0,a.yg)("hr",null),(0,a.yg)("h3",{id:"synchronous-methods"},(0,a.yg)("strong",{parentName:"h3"},"Synchronous Methods")),(0,a.yg)("h4",{id:"init"},(0,a.yg)("inlineCode",{parentName:"h4"},"__init__(self, base_url: str, api_key: Optional[str] = None) -> None")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Description"),":",(0,a.yg)("br",{parentName:"p"}),"\n","Initializes the JavelinClient."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Parameters"),":  "),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"base_url"),": Base URL for the Javelin API."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"api_key")," (optional): API key for authorization (if required).")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":",(0,a.yg)("br",{parentName:"p"}),"\n","None."),(0,a.yg)("hr",null),(0,a.yg)("h4",{id:"client"},(0,a.yg)("inlineCode",{parentName:"h4"},"client")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Description"),":",(0,a.yg)("br",{parentName:"p"}),"\n","Property that returns an HTTP client for synchronous operations. If the client does not exist, it creates and initializes one."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":",(0,a.yg)("br",{parentName:"p"}),"\n","An instance of ",(0,a.yg)("inlineCode",{parentName:"p"},"httpx.Client")," initialized with the base URL, headers, and a specific timeout."),(0,a.yg)("hr",null),(0,a.yg)("h4",{id:"aclient"},(0,a.yg)("inlineCode",{parentName:"h4"},"aclient")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Description"),":",(0,a.yg)("br",{parentName:"p"}),"\n","Property that returns an HTTP client for asynchronous operations. If the client does not exist, it creates and initializes one."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":",(0,a.yg)("br",{parentName:"p"}),"\n","An instance of ",(0,a.yg)("inlineCode",{parentName:"p"},"httpx.AsyncClient")," initialized with the base URL, headers, and a specific timeout."),(0,a.yg)("hr",null),(0,a.yg)("h4",{id:"__enter__self---javelinclient"},(0,a.yg)("inlineCode",{parentName:"h4"},'__enter__(self) -> "JavelinClient"')),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Description"),":",(0,a.yg)("br",{parentName:"p"}),"\n","Enter the runtime context for the synchronous client and returns itself."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":",(0,a.yg)("br",{parentName:"p"}),"\n","The instance of the JavelinClient."),(0,a.yg)("hr",null),(0,a.yg)("h4",{id:"__exit__self-exc_type-exc_val-exc_tb---none"},(0,a.yg)("inlineCode",{parentName:"h4"},"__exit__(self, exc_type, exc_val, exc_tb) -> None")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Description"),":",(0,a.yg)("br",{parentName:"p"}),"\n","Exit the runtime context for the synchronous client."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Parameters"),":  "),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"exc_type"),": The type of exception."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"exc_val"),": The exception instance."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"exc_tb"),": The traceback object.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":",(0,a.yg)("br",{parentName:"p"}),"\n","None."),(0,a.yg)("hr",null),(0,a.yg)("h4",{id:"closeself"},(0,a.yg)("inlineCode",{parentName:"h4"},"close(self)")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Description"),":",(0,a.yg)("br",{parentName:"p"}),"\n","Closes the synchronous client if it exists."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":",(0,a.yg)("br",{parentName:"p"}),"\n","None."),(0,a.yg)("hr",null),(0,a.yg)("h4",{id:"get_routeself-route_name-str---route"},(0,a.yg)("inlineCode",{parentName:"h4"},"get_route(self, route_name: str) -> Route")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Description"),": Retrieves the details of a specific route given its name.  "),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Parameters"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"route_name")," : Name of the route to retrieve.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"Route"),": The route object.")),(0,a.yg)("hr",null),(0,a.yg)("h4",{id:"create_routeself-route-route---str"},(0,a.yg)("inlineCode",{parentName:"h4"},"create_route(self, route: Route) -> str")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Description"),": Creates a new route based on the provided route object.  "),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Parameters"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"route")," : Route object with details for creation.  ")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"str"),': "OK" if the Route was created successfully')),(0,a.yg)("hr",null),(0,a.yg)("h4",{id:"update_routeself-route-route---str"},(0,a.yg)("inlineCode",{parentName:"h4"},"update_route(self, route: Route) -> str")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Description"),": Updates an existing route based on the provided route object.  "),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Parameters"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"route")," (Route): Route object with updated details.  ")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"str"),": Confirmation message or ID of the updated route.")),(0,a.yg)("hr",null),(0,a.yg)("h4",{id:"list_routesself---routes"},(0,a.yg)("inlineCode",{parentName:"h4"},"list_routes(self) -> Routes")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Description"),": Lists all available routes.  "),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"Routes"),": A collection of route objects.")),(0,a.yg)("hr",null),(0,a.yg)("h4",{id:"query_routeself-route_name-str-query_body-dictstr-any---queryresponse"},(0,a.yg)("inlineCode",{parentName:"h4"},"query_route(self, route_name: str, query_body: Dict[str, Any]) -> QueryResponse")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Description"),": Queries a specific route based on the given query parameters.  "),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Parameters"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"route_name")," (str): Name of the route to query."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"query_body")," (Dict","[str, Any]","): Dictionary containing query parameters.")),(0,a.yg)("hr",null),(0,a.yg)("h3",{id:"asynchronous-methods"},(0,a.yg)("strong",{parentName:"h3"},"Asynchronous Methods")),(0,a.yg)("h4",{id:"__init__self-base_url-str-api_key-optionalstr--none---none"},(0,a.yg)("inlineCode",{parentName:"h4"},"__init__(self, base_url: str, api_key: Optional[str] = None) -> None")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Description"),":",(0,a.yg)("br",{parentName:"p"}),"\n","Initializes the client with the provided base URL and an optional API key."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Parameters"),":  "),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"base_url"),": The base URL of the service or API endpoint."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"api_key")," (optional): The authentication key used to access the service. If not provided, the client may operate in an unauthenticated mode or utilize other means of authentication.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":",(0,a.yg)("br",{parentName:"p"}),"\n","None. This method initializes the client instance."),(0,a.yg)("hr",null),(0,a.yg)("h4",{id:"aget_routeself-route_name-str---route"},(0,a.yg)("inlineCode",{parentName:"h4"},"aget_route(self, route_name: str) -> Route")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Description"),": Asynchronously retrieves the details of a specific route given its name.  "),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Parameters"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"route_name")," (str): Name of the route to retrieve.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"Route"),": The route object.")),(0,a.yg)("hr",null),(0,a.yg)("h4",{id:"acreate_routeself-route-route---str"},(0,a.yg)("inlineCode",{parentName:"h4"},"acreate_route(self, route: Route) -> str")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Description"),": Asynchronously creates a new route based on the provided route object. "),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Parameters"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"route")," (Route): Route object with details for creation.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"str"),": Confirmation message or ID of the created route.")),(0,a.yg)("hr",null),(0,a.yg)("h4",{id:"aupdate_routeself-route-route---str"},(0,a.yg)("inlineCode",{parentName:"h4"},"aupdate_route(self, route: Route) -> str")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Description"),": Asynchronously updates an existing route based on the provided route object.  "),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Parameters"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"route")," (Route): Route object with updated details.")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"str"),": Confirmation message or ID of the updated route.")),(0,a.yg)("hr",null),(0,a.yg)("h4",{id:"alist_routesself---routes"},(0,a.yg)("inlineCode",{parentName:"h4"},"alist_routes(self) -> Routes")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Description"),": Asynchronously lists all available routes.  "),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"Routes"),": A collection of route objects.")),(0,a.yg)("hr",null),(0,a.yg)("h4",{id:"aquery_routeself-route_name-str-query_body-dictstr-any---queryresponse"},(0,a.yg)("inlineCode",{parentName:"h4"},"aquery_route(self, route_name: str, query_body: Dict[str, Any]) -> QueryResponse")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Description"),": Asynchronously queries a specific route based on the given query parameters.  "),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Parameters"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"route_name")," (str): Name of the route to query."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"query_body")," (Dict","[str, Any]","): Dictionary containing query parameters.")),(0,a.yg)("hr",null),(0,a.yg)("h4",{id:"adelete_routeself-route_name-str---str"},(0,a.yg)("inlineCode",{parentName:"h4"},"adelete_route(self, route_name: str) -> str")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Description"),": Asynchronously deletes a specific route based on its name.  "),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Parameters"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"route_name")," (str): Name of the route to delete.  ")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Returns"),":"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("inlineCode",{parentName:"li"},"str"),": Confirmation message or ID of the deleted route.  ")),(0,a.yg)("hr",null))}g.isMDXComponent=!0}}]);