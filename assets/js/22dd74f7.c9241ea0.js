"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1567],{55226:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docsSidebar":[{"type":"category","label":"Getting Started","items":[{"type":"link","label":"Overview","href":"/","docId":"javelin-core/overview","unlisted":false},{"type":"link","label":"Supported LLMs","href":"/javelin-core/supported-llms","docId":"javelin-core/supported-llms","unlisted":false},{"type":"link","label":"Integration Guide","href":"/javelin-core/integration-new","docId":"javelin-core/integration-new","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Core Concepts","items":[{"type":"link","label":"Technical Architecture","href":"/javelin-architecture/","docId":"javelin-architecture/javelin-architecture","unlisted":false},{"type":"category","label":"Gateways","items":[{"type":"link","label":"Integration Overview","href":"/javelin-core/gatewayconfiguration","docId":"javelin-core/gatewayconfiguration","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Routes","items":[{"type":"link","label":"Route Configuration","href":"/javelin-core/route-configuration","docId":"javelin-core/route-configuration","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Providers","items":[{"type":"link","label":"Provider Configuration","href":"/javelin-core/providerconfiguration","docId":"javelin-core/providerconfiguration","unlisted":false}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"Security & Guardrails","items":[{"type":"link","label":"Processors Overview","href":"/javelin-processors/processors-overview","docId":"javelin-processors/processors-overview","unlisted":false},{"type":"category","label":"Prompt Injection & Jailbreak Detection","items":[{"type":"link","label":"Prompt Injection","href":"/javelin-processors/prompt-injection","docId":"javelin-processors/prompt-injection","unlisted":false},{"type":"link","label":"Usage","href":"/javelin-processors/promptinjectionusage","docId":"javelin-processors/promptinjectionusage","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Sensitive Data Protection","items":[{"type":"link","label":"Data Protection","href":"/javelin-processors/privacyredaction","docId":"javelin-processors/privacyredaction","unlisted":false},{"type":"link","label":"Infotype Classifiers","href":"/javelin-processors/infotypes","docId":"javelin-processors/infotypes","unlisted":false},{"type":"link","label":"InfoTypes Reference","href":"/javelin-processors/infotypes-reference","docId":"javelin-processors/infotypes-reference","unlisted":false},{"type":"category","label":"Usage Examples","items":[{"type":"link","label":"PII/PHI Detection","href":"/javelin-processors/piiphi","docId":"javelin-processors/piiphi","unlisted":false},{"type":"link","label":"Detect Secrets & Sensitive Credentials","href":"/javelin-processors/secretsandcredentials","docId":"javelin-processors/secretsandcredentials","unlisted":false}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"Trust & Safety","items":[{"type":"link","label":"Overview","href":"/javelin-processors/trustsafety","docId":"javelin-processors/trustsafety","unlisted":false},{"type":"link","label":"Taxonomies","href":"/javelin-processors/contentmoderation","docId":"javelin-processors/contentmoderation","unlisted":false},{"type":"link","label":"Usage","href":"/javelin-processors/trustsafetyusage","docId":"javelin-processors/trustsafetyusage","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Content Filtering","items":[{"type":"link","label":"Keyword Filtering","href":"/javelin-processors/keywordfilter","docId":"javelin-processors/keywordfilter","unlisted":false},{"type":"link","label":"Competitor & Restricted Keyword Check","href":"/javelin-processors/keywordcheck","docId":"javelin-processors/keywordcheck","unlisted":false},{"type":"link","label":"Regex Matching","href":"/javelin-processors/regex","docId":"javelin-processors/regex","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Security Filters","items":[{"type":"link","label":"Filters","href":"/javelin-processors/securityfilters","docId":"javelin-processors/securityfilters","unlisted":false},{"type":"link","label":"Malware Detection","href":"/javelin-processors/malware","docId":"javelin-processors/malware","unlisted":false},{"type":"category","label":"Usage Examples","items":[{"type":"link","label":"Code Detection","href":"/javelin-processors/codedetectionusage","docId":"javelin-processors/codedetectionusage","unlisted":false},{"type":"link","label":"Garbage & Non-ASCII Character Detection","href":"/javelin-processors/garbagedetectionusage","docId":"javelin-processors/garbagedetectionusage","unlisted":false},{"type":"link","label":"Language Detection","href":"/javelin-processors/languagedetectionusage","docId":"javelin-processors/languagedetectionusage","unlisted":false},{"type":"link","label":"Malware & Phishing Detection","href":"/javelin-processors/malwareusage","docId":"javelin-processors/malwareusage","unlisted":false}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"Custom Guardrails","items":[{"type":"link","label":"Custom Guardrails","href":"/javelin-processors/javascript","docId":"javelin-processors/javascript","unlisted":false}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"Features","items":[{"type":"category","label":"Model Reliability","items":[{"type":"link","label":"Retries","href":"/javelin-core/features/retries","docId":"javelin-core/features/retries","unlisted":false},{"type":"link","label":"Rate Limits","href":"/javelin-core/features/ratelimits","docId":"javelin-core/features/ratelimits","unlisted":false},{"type":"link","label":"Load Balancing","href":"/javelin-core/features/loadbalancing","docId":"javelin-core/features/loadbalancing","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Model Routing","items":[{"type":"link","label":"Automatic & Intelligent LLM Selection","href":"/javelin-core/features/automaticllm","docId":"javelin-core/features/automaticllm","unlisted":false},{"type":"link","label":"Overview","href":"/javelin-core/fallbackrouting/overview","docId":"javelin-core/fallbackrouting/overview","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Secrets Vault","items":[{"type":"link","label":"Overview","href":"/javelin-core/secretsvault/overview","docId":"javelin-core/secretsvault/overview","unlisted":false},{"type":"link","label":"Virtual Keys","href":"/javelin-core/secretsvault/virtualkeys","docId":"javelin-core/secretsvault/virtualkeys","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Compliance & Monitoring","items":[{"type":"link","label":"Archiving","href":"/javelin-core/features/auditarchive","docId":"javelin-core/features/auditarchive","unlisted":false},{"type":"link","label":"Threat Alerts","href":"/javelin-webapp/threat-alerts/overview","docId":"javelin-webapp/threat-alerts/overview","unlisted":false},{"type":"link","label":"Alert Integration","href":"/javelin-admin/alerts/overview","docId":"javelin-admin/alerts/overview","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Developer Tools","items":[{"type":"link","label":"Model Scan","href":"/javelin-core/model-scan","docId":"javelin-core/model-scan","unlisted":false},{"type":"link","label":"Model Playground","href":"/javelin-core/playground/","docId":"javelin-core/playground/playground","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"link","label":"Third-Party Integrations","href":"/javelin-core/3rdpartyintegrations","docId":"javelin-core/3rdpartyintegrations","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"Python SDK","items":[{"type":"link","label":"Python Quickstart","href":"/javelin-python/python-quickstart","docId":"javelin-python/python-quickstart","unlisted":false},{"type":"category","label":"API Reference","items":[{"type":"link","label":"Data Model","href":"/javelin-python/models","docId":"javelin-python/models","unlisted":false},{"type":"link","label":"JavelinClient","href":"/javelin-python/javelinclient","docId":"javelin-python/javelinclient","unlisted":false},{"type":"link","label":"Exceptions","href":"/javelin-python/exceptions","docId":"javelin-python/exceptions","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"CLI Reference","items":[{"type":"link","label":"Quickstart Guide","href":"/javelin-python/cli","docId":"javelin-python/cli","unlisted":false}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"Resources","items":[{"type":"link","label":"Security","href":"/security","docId":"security","unlisted":false},{"type":"link","label":"Changelog","href":"/changelog","docId":"changelog","unlisted":false},{"type":"link","label":"Style Guide","href":"/contributing/style-guide","docId":"contributing/style-guide","unlisted":false}],"collapsed":true,"collapsible":true}]},"docs":{"changelog":{"id":"changelog","title":"Changelog","description":"Complete changelog of Javelin platform updates, new features, security enhancements, and performance improvements","sidebar":"docsSidebar"},"contributing/style-guide":{"id":"contributing/style-guide","title":"Documentation Style Guide","description":"Comprehensive style guide for Javelin documentation including writing standards, formatting conventions, and content organization guidelines","sidebar":"docsSidebar"},"javelin-admin/alerts/overview":{"id":"javelin-admin/alerts/overview","title":"Alert Integration","description":"Slack Alert Integration","sidebar":"docsSidebar"},"javelin-admin/alerts/slack/overview":{"id":"javelin-admin/alerts/slack/overview","title":"Steps to Create a Slack Webhook","description":"1. Go to Slack API Portal: Visit Slack API and sign in."},"javelin-admin/alerts/splunk/overview":{"id":"javelin-admin/alerts/splunk/overview","title":"Steps to Create an HTTP Event Collector (HEC) in Splunk","description":"1. Log in to Splunk: Sign in to your Splunk instance."},"javelin-admin/threats/overview":{"id":"javelin-admin/threats/overview","title":"List of Threats","description":"1. sensitivedatadetectedrequestblocked"},"javelin-architecture/javelin-architecture":{"id":"javelin-architecture/javelin-architecture","title":"Technical Architecture","description":"Executive Summary","sidebar":"docsSidebar"},"javelin-core/3rdpartyintegrations":{"id":"javelin-core/3rdpartyintegrations","title":"Third-Party Integrations","description":"SSO Providers","sidebar":"docsSidebar"},"javelin-core/administration/create-route":{"id":"javelin-core/administration/create-route","title":"Creating Route","description":"Step-by-step guide to creating routes with safety configurations, DLP, content filtering, and security settings"},"javelin-core/administration/createprovider":{"id":"javelin-core/administration/createprovider","title":"Creating Provider","description":"Providers in Javelin represent the external AI services and models that your routes connect to, such as OpenAI, Anthropic, or local models. This guide walks you through creating and configuring providers to establish connections with your preferred AI services. You\'ll learn how to set up provider credentials, API endpoints, and configuration parameters to integrate with various model providers."},"javelin-core/administration/createtemplate":{"id":"javelin-core/administration/createtemplate","title":"Creating Templates","description":"Learn how to create data protection templates using the Javelin API"},"javelin-core/administration/createvkey":{"id":"javelin-core/administration/createvkey","title":"Creating Virtual Key","description":"<CodeBlock"},"javelin-core/administration/deleteprovider":{"id":"javelin-core/administration/deleteprovider","title":"Deleting Provider","description":"<CodeBlock"},"javelin-core/administration/deleteroute":{"id":"javelin-core/administration/deleteroute","title":"Deleting Route","description":"<CodeBlock"},"javelin-core/administration/deletetemplate":{"id":"javelin-core/administration/deletetemplate","title":"Deleting Template","description":"<CodeBlock"},"javelin-core/administration/deletevkey":{"id":"javelin-core/administration/deletevkey","title":"Deleting Virtual Key","description":"<CodeBlock"},"javelin-core/administration/getprovider":{"id":"javelin-core/administration/getprovider","title":"Getting Provider","description":"<CodeBlock"},"javelin-core/administration/getroute":{"id":"javelin-core/administration/getroute","title":"Getting Route","description":"<CodeBlock"},"javelin-core/administration/gettemplate":{"id":"javelin-core/administration/gettemplate","title":"Getting Template","description":"<CodeBlock"},"javelin-core/administration/getvkey":{"id":"javelin-core/administration/getvkey","title":"Getting Virtual Key","description":"<CodeBlock"},"javelin-core/administration/listproviders":{"id":"javelin-core/administration/listproviders","title":"Listing Providers","description":"Viewing your configured providers helps you understand which AI services are available and manage your model integrations effectively. This guide shows you how to retrieve and examine all providers in your gateway using both API calls and the Python SDK. You\'ll learn to list providers to audit connections, troubleshoot integration issues, and manage your AI service portfolio."},"javelin-core/administration/listroutes":{"id":"javelin-core/administration/listroutes","title":"Listing Routes","description":"Viewing your configured routes helps you understand your current setup and manage your Javelin deployment effectively. This guide shows you how to retrieve and examine all routes in your gateway using both API calls and the Python SDK. You\'ll learn to list routes to audit configurations, troubleshoot issues, and manage your routing infrastructure."},"javelin-core/administration/listtemplates":{"id":"javelin-core/administration/listtemplates","title":"Listing Templates","description":"<CodeBlock"},"javelin-core/administration/listvkeys":{"id":"javelin-core/administration/listvkeys","title":"Listing Virtual Keys","description":"<CodeBlock"},"javelin-core/administration/updateprovider":{"id":"javelin-core/administration/updateprovider","title":"Updating Provider","description":"<CodeBlock"},"javelin-core/administration/updateroute":{"id":"javelin-core/administration/updateroute","title":"Updating Route","description":"<CodeBlock"},"javelin-core/administration/updatetemplate":{"id":"javelin-core/administration/updatetemplate","title":"Updating Template","description":"<CodeBlock"},"javelin-core/administration/updatevkey":{"id":"javelin-core/administration/updatevkey","title":"Updating Virtual Key","description":"<CodeBlock"},"javelin-core/advanced":{"id":"javelin-core/advanced","title":"Features","description":""},"javelin-core/core-quickstart":{"id":"javelin-core/core-quickstart","title":"Javelin Core Quickstart","description":"Quick setup guide for getting started with Javelin Core platform"},"javelin-core/dataprotectionconfiguration":{"id":"javelin-core/dataprotectionconfiguration","title":"Data Protection Configuration","description":"Data protection templates in Javelin define how sensitive information is detected, analyzed, and transformed to ensure privacy and compliance. This guide covers all template configuration options for protecting personally identifiable information (PII), credentials, and other sensitive data types. You\'ll learn to configure inspection rules, transformation methods like redaction and masking, and likelihood thresholds to implement comprehensive data protection strategies across your AI applications."},"javelin-core/fallbackrouting/overview":{"id":"javelin-core/fallbackrouting/overview","title":"Overview","description":"Introduction","sidebar":"docsSidebar"},"javelin-core/features/auditarchive":{"id":"javelin-core/features/auditarchive","title":"Archiving","description":"Javelin provides organizations with state-of-the-art archiving capabilities, catering to diverse requirements ranging from compliance to model optimization.","sidebar":"docsSidebar"},"javelin-core/features/automaticllm":{"id":"javelin-core/features/automaticllm","title":"Automatic & Intelligent LLM Selection","description":"Automatic LLM selection in Javelin intelligently chooses the most appropriate AI model for each request based on your specified criteria like cost, accuracy, or speed. This feature eliminates the complexity of manually selecting models by analyzing task requirements and dynamically routing requests to optimal providers. You\'ll learn to configure selection policies, set performance priorities, and leverage intelligent routing to maximize efficiency across diverse AI workloads.","sidebar":"docsSidebar"},"javelin-core/features/caching":{"id":"javelin-core/features/caching","title":"Semantic Caching","description":"In the realm of AI-driven applications, ensuring efficient cost structures and swift responses is vital. Javelin\u2019s innovative semantic cache offers a balanced solution that significantly reduces costs while dramatically enhancing performance. Unlike traditional caches that rely on exact data matches, the semantic cache understands the underlying meaning of a request. This means even if a user\u2019s query isn\'t an exact match to a previously stored query, the cache can recognize its semantic similarity and fetch the relevant response."},"javelin-core/features/costguardrails":{"id":"javelin-core/features/costguardrails","title":"Cost Guardrails","description":"Cost guardrails in Javelin help you control and monitor AI spending by setting budgets and limits on your routes and models. This feature prevents unexpected cost overruns and enables automatic failover to more cost-effective alternatives when budgets are exceeded. You\'ll learn to configure spending limits, cost tracking, and budget-based routing policies to maintain predictable AI infrastructure costs."},"javelin-core/features/features":{"id":"javelin-core/features/features","title":"Features","description":""},"javelin-core/features/loadbalancing":{"id":"javelin-core/features/loadbalancing","title":"Load Balancing","description":"Load balancing in Javelin distributes traffic across multiple AI models and providers to optimize performance, cost, and reliability. This feature allows you to implement sophisticated traffic shaping strategies, set up fallback mechanisms, and distribute load across multiple API credentials. You\'ll learn to configure load balancing for traffic optimization, cost management, and high availability scenarios.","sidebar":"docsSidebar"},"javelin-core/features/ratelimits":{"id":"javelin-core/features/ratelimits","title":"Rate Limits","description":"Javelin is designed with protective measures to ensure that Large Language Model (LLM) endpoints aren\'t unintentionally overloaded.","sidebar":"docsSidebar"},"javelin-core/features/retries":{"id":"javelin-core/features/retries","title":"Retries","description":"Javelin comes equipped with a robust mechanism that offers built-in support for retrying interactions with any Large Language Model (LLM).","sidebar":"docsSidebar"},"javelin-core/features/throttling":{"id":"javelin-core/features/throttling","title":"Throttling","description":"Throttling in Javelin controls the rate at which requests are processed to protect your AI infrastructure from overload and manage costs effectively. This feature helps you maintain stable performance by limiting concurrent requests and implementing queue management for high-traffic scenarios. You\'ll learn to configure throttling policies, set request limits, and balance system performance with resource utilization across your AI applications."},"javelin-core/features/usage":{"id":"javelin-core/features/usage","title":"Usage","description":"Usage tracking in Javelin provides comprehensive analytics and monitoring for your AI infrastructure, giving you insights into request volumes, costs, performance metrics, and user patterns. This feature helps you understand how your AI applications are being used and optimize resource allocation. You\'ll learn to configure usage reporting, set up alerts, and analyze metrics to make data-driven decisions about your AI deployment."},"javelin-core/gatewayconfiguration":{"id":"javelin-core/gatewayconfiguration","title":"Integration Overview","description":"Javelin offers configuration options to setup Model Gateways. You can easily connect your applications to route all Generative AI traffic through Javelin.","sidebar":"docsSidebar"},"javelin-core/integration-new":{"id":"javelin-core/integration-new","title":"Integrating Applications","description":"Complete guide to integrating your LLM applications with Javelin\'s unified endpoints architecture for secure and monitored AI interactions","sidebar":"docsSidebar"},"javelin-core/model-scan":{"id":"javelin-core/model-scan","title":"Model Scan","description":"Introduction","sidebar":"docsSidebar"},"javelin-core/overview":{"id":"javelin-core/overview","title":"Introduction to Javelin","description":"Comprehensive overview of Javelin, a cutting-edge AI production platform designed for LLM-forward enterprises with centralized guardrails and distributed team controls","sidebar":"docsSidebar"},"javelin-core/playground/overview":{"id":"javelin-core/playground/overview","title":"Overview","description":"Javelin\'s Large Language Model (LLM) Prompt Playground is designed to assist developers, researchers, and enthusiasts interact with and explore the capabilities of large language models."},"javelin-core/playground/playground":{"id":"javelin-core/playground/playground","title":"Model Playground","description":"The Model Playground provides a simple interface to test model routes and generate shareable inputs and outputs.","sidebar":"docsSidebar"},"javelin-core/playground/playground-prev":{"id":"javelin-core/playground/playground-prev","title":"Prompt Playground","description":"Using Javelin\'s Prompt Playground"},"javelin-core/providerconfiguration":{"id":"javelin-core/providerconfiguration","title":"Provider Configuration","description":"Providers represent the external AI services and models that power your Javelin routes, including both open source and closed source Large Language Models (LLMs). This guide covers all provider configuration options including API credentials, endpoints, model specifications, and connection settings. You\'ll learn to configure providers for various AI services like OpenAI, Anthropic, local models, and custom endpoints to build a robust multi-provider infrastructure.","sidebar":"docsSidebar"},"javelin-core/route-configuration":{"id":"javelin-core/route-configuration","title":"Route Configuration","description":"Comprehensive guide to configuring Javelin routes including models, providers, rate limits, and advanced settings","sidebar":"docsSidebar"},"javelin-core/secretsconfiguration":{"id":"javelin-core/secretsconfiguration","title":"Integration Overview","description":"Javelin offers configuration options to setup Large Language Models(LLMs) API Keys. You can easily setup virtual keys for all the providers. This will enable all your applications across your enterprise access all of your providers with just Javelin API Key."},"javelin-core/secretsvault/overview":{"id":"javelin-core/secretsvault/overview","title":"Overview","description":"The secret vault is a security mechanism designed to store, manage, and provision access to sensitive information such as API keys, database credentials, and other secrets necessary for various operations within software applications. The vault ensures that sensitive information is not hard-coded into source code or exposed in configuration files, thereby reducing the risk of leaks and breaches.","sidebar":"docsSidebar"},"javelin-core/secretsvault/virtualkeys":{"id":"javelin-core/secretsvault/virtualkeys","title":"Virtual Keys","description":"The Virtual API Key feature is designed to enhance security and convenience for developers integrating with Large Language Model (LLM) providers. This feature allows for the secure storage of LLM provider API keys within a dedicated secret vault. Applications can use a virtual API key, which acts as a placeholder for the actual API keys.","sidebar":"docsSidebar"},"javelin-core/settinguproutes":{"id":"javelin-core/settinguproutes","title":"Setting Up Routes","description":"Javelin offers a variety of configuration options to setup policies, cost guardrails and traffic shaping."},"javelin-core/supported-llms":{"id":"javelin-core/supported-llms","title":"Supported Language Models","description":"Complete list of supported LLM providers including OpenAI, Azure OpenAI, Anthropic, Mistral, Cohere, Amazon Bedrock, HuggingFace, and more","sidebar":"docsSidebar"},"javelin-gpt/javelingpt":{"id":"javelin-gpt/javelingpt","title":"Javelin GPT","description":"Javelin GPT is designed to execute queries across a spectrum of models, providing you with their outputs for analysis. Here\'s a summary of what I can do:"},"javelin-gpt/opengpt":{"id":"javelin-gpt/opengpt","title":"Javelin Open GPT","description":"Open GPT is an effort to democratize access to customizable AI models, similar to OpenAI\'s GPTs and Assistants API, but with a focus on open standards, transparency, and broader accessibility. This initiative could aim to enable users, developers, and organizations to create, share, and deploy their own versions of generative AI models tailored to specific needs or tasks, without the constraints of proprietary systems. Here\'s an overview of what such an initiative might entail:"},"javelin-gpt/overview":{"id":"javelin-gpt/overview","title":"Overview","description":"GPTs are customizable versions of ChatGPT tailored for specific use cases or topics. They\'re designed to be user-friendly, allowing Plus and Enterprise users to create them without needing to write any code. This flexibility lets users focus on crafting GPTs to perform a wide array of tasks, from educational purposes to specialized technical support. The main highlights of GPTs include:"},"javelin-gpt/vercelaisdk":{"id":"javelin-gpt/vercelaisdk","title":"Vercel AI SDK Integrations","description":"For detailed information on AI integrations within Vercel\'s ecosystem, including insights on how these integrations can enhance web development workflows, optimize performance, and leverage AI technologies, it\'s best to directly visit Vercel\'s blog on AI integrations."},"javelin-js/api-reference":{"id":"javelin-js/api-reference","title":"api-reference","description":""},"javelin-js/js-quickstart":{"id":"javelin-js/js-quickstart","title":"JavaScript SDK Quickstart","description":"Quick setup guide for getting started with the Javelin JavaScript SDK"},"javelin-langchain-python/chain":{"id":"javelin-langchain-python/chain","title":"Chain Integration","description":"Javelin is fully integrated into Langchain to support Apps already built on Langchain to rapidly use the Gateway to leverage all the features & capabilities of Javelin."},"javelin-langchain-python/quickstart":{"id":"javelin-langchain-python/quickstart","title":"Quickstart","description":"With your LangChain environment, you can use Javelin by changing the API base and adding Javelin headers"},"javelin-processors/codedetectionusage":{"id":"javelin-processors/codedetectionusage","title":"Code Detection","description":"To configure Javelin\'s Code Detection capabilities, you will need to enable the securityfilters_processor.","sidebar":"docsSidebar"},"javelin-processors/contentmoderation":{"id":"javelin-processors/contentmoderation","title":"Taxonomies","description":"In the era of digital communication and user-generated content, content moderation has become crucial for maintaining the integrity, safety, and user-friendliness of online platforms. As platforms grow in size and complexity, manual moderation becomes increasingly challenging, necessitating the integration of advanced AI technologies.","sidebar":"docsSidebar"},"javelin-processors/contenttype":{"id":"javelin-processors/contenttype","title":"Content Type Filtering","description":"Code"},"javelin-processors/custom-processors":{"id":"javelin-processors/custom-processors","title":"Extension Guardrails","description":"Learn how to build custom extension guardrails using GRPC interfaces in Go, Python, and TypeScript"},"javelin-processors/entropyusage":{"id":"javelin-processors/entropyusage","title":"Entropy Calculation","description":"To configure Javelin\'s entropy calculation capabilities, you will need to enable the securityfilters_processor."},"javelin-processors/garbagedetectionusage":{"id":"javelin-processors/garbagedetectionusage","title":"Garbage & Non-ASCII Character Detection","description":"To configure Javelin\'s Garbage Detection capabilities, you will need to enable the securityfilters_processor.","sidebar":"docsSidebar"},"javelin-processors/hallucination":{"id":"javelin-processors/hallucination","title":"Hallucination Detection","description":"Hallucination detection in Javelin identifies when AI models generate factually incorrect or nonsensical responses that appear plausible but lack grounding in reality. This processor analyzes LLM outputs and provides probability scores indicating the likelihood of hallucinated content. You\'ll learn to configure hallucination detection thresholds, integrate scoring into your application logic, and set up automated responses to reduce the impact of AI hallucinations on your users."},"javelin-processors/infotypes":{"id":"javelin-processors/infotypes","title":"Infotype Classifiers","description":"Javelin supports a large library of infotype classifiers. They are further consolidated across the following categories.","sidebar":"docsSidebar"},"javelin-processors/infotypes-reference":{"id":"javelin-processors/infotypes-reference","title":"InfoTypes Reference","description":"Complete reference of all supported sensitive data types for Javelin\'s data protection","sidebar":"docsSidebar"},"javelin-processors/javascript":{"id":"javelin-processors/javascript","title":"Custom Guardrails","description":"Javelin can be extended with custom guardrails to enable additional functionality. Custom guardrails can be used to perform custom operations on the input data before it is sent to the model or on the output data before it is returned to the user. Custom guardrails can also be used to implement custom data transformations, data validation, data augmentation, and more.","sidebar":"docsSidebar"},"javelin-processors/keywordcheck":{"id":"javelin-processors/keywordcheck","title":"Competitor & Restricted Keyword Check","description":"To configure Javelin\'s Competitor & Restricted Keyword Check Processor, you need to define actions to be taken upon detection of restricted keywords. By customizing these settings, you can tailor the processor to your application\'s specific requirements and threat landscape. Keywords may be any reserved keyword including competitor names, sensitive project names or other restricted keywords that you want to monitor.","sidebar":"docsSidebar"},"javelin-processors/keywordfilter":{"id":"javelin-processors/keywordfilter","title":"Keyword Filtering","description":"Keyword filtering is a critical feature in data processing and content moderation systems. It involves scanning text content for specific words or patterns and taking predefined actions when these are detected. This functionality is crucial in various applications, including web content filtering, email spam prevention, and ensuring compliance with regulatory standards.","sidebar":"docsSidebar"},"javelin-processors/languagedetectionusage":{"id":"javelin-processors/languagedetectionusage","title":"Language Detection","description":"To configure Javelin\'s Language Detection capabilities, you will need to enable the securityfilters_processor.","sidebar":"docsSidebar"},"javelin-processors/malware":{"id":"javelin-processors/malware","title":"Malware Detection","description":"Cybersecurity threats are ever-evolving, with malicious actors constantly devising new methods to compromise personal and organizational security. Among these threats, malicious URLs stand out as a primary vector for launching phishing attacks and spreading malware. These URLs exploit human trust and technological vulnerabilities to achieve a range of nefarious objectives, from stealing sensitive information to infecting systems with malicious software.","sidebar":"docsSidebar"},"javelin-processors/malwareusage":{"id":"javelin-processors/malwareusage","title":"Malware & Phishing Detection","description":"To configure Javelin\'s malware and phishing detection capabilities, you will need to enable the checkphish_processor.","sidebar":"docsSidebar"},"javelin-processors/piiphi":{"id":"javelin-processors/piiphi","title":"PII/PHI Detection","description":"PII/PHI detection in Javelin automatically identifies and protects personally identifiable information (PII) and protected health information (PHI) in your AI interactions. This processor scans incoming requests and outgoing responses for sensitive data types like names, social security numbers, credit cards, and medical information. You\'ll learn to configure detection rules, transformation actions, and information types to ensure compliance with privacy regulations like GDPR and HIPAA.","sidebar":"docsSidebar"},"javelin-processors/privacyredaction":{"id":"javelin-processors/privacyredaction","title":"Data Protection","description":"Real-time Monitoring","sidebar":"docsSidebar"},"javelin-processors/processors-overview":{"id":"javelin-processors/processors-overview","title":"Javelin Processors Overview","description":"Learn about Javelin\'s processor framework, including synchronous and asynchronous execution modes, processor chains, and DAG structures for customizable processing","sidebar":"docsSidebar"},"javelin-processors/prompt-injection":{"id":"javelin-processors/prompt-injection","title":"Prompt Injection Detection","description":"Learn about prompt injection attacks and how Javelin\'s processor detects and prevents malicious input manipulation","sidebar":"docsSidebar"},"javelin-processors/promptinjectionusage":{"id":"javelin-processors/promptinjectionusage","title":"Usage","description":"To configure Javelin\'s Prompt Injection Processor, you need to define actions to be taken upon detection of prompts or jailbreaks. By customizing these settings, you can tailor the processor to your application\'s specific requirements and threat landscape.","sidebar":"docsSidebar"},"javelin-processors/regex":{"id":"javelin-processors/regex","title":"Regex Matching","description":"To configure Javelin\'s Regex processing, you need to define actions to be taken upon match with a configured regex pattern. By customizing these settings, you can tailor the processor to your application\'s specific requirements and threat landscape.","sidebar":"docsSidebar"},"javelin-processors/request-processors":{"id":"javelin-processors/request-processors","title":"Request Processors","description":""},"javelin-processors/response-processors":{"id":"javelin-processors/response-processors","title":"Response Processors","description":""},"javelin-processors/secretsandcredentials":{"id":"javelin-processors/secretsandcredentials","title":"Detect Secrets & Sensitive Credentials","description":"Secrets and credentials detection in Javelin automatically identifies and protects sensitive authentication information like API keys, passwords, tokens, and cloud credentials in your AI interactions. This processor scans requests and responses for exposed secrets that could compromise your infrastructure security. You\'ll learn to configure detection rules, response actions, and security infotypes to prevent accidental exposure of sensitive credentials through AI applications.","sidebar":"docsSidebar"},"javelin-processors/securityfilters":{"id":"javelin-processors/securityfilters","title":"Filters","description":"Security filters are a critical component of the Javelin platform, providing a robust mechanism for enforcing security policies and protecting sensitive data. These filters are designed to intercept, analyze incoming and outgoing data streams, ensuring that only authorized and secure information is exchanged between the platform and external systems.","sidebar":"docsSidebar"},"javelin-processors/trustsafety":{"id":"javelin-processors/trustsafety","title":"Overview","description":"Trust & Safety is a critical aspect of online platforms, focusing on creating and maintaining a secure and positive environment for users. This domain encompasses a range of strategies, policies, and tools designed to protect users and ensure a respectful, inclusive, and law-abiding online community.","sidebar":"docsSidebar"},"javelin-processors/trustsafetyusage":{"id":"javelin-processors/trustsafetyusage","title":"Usage","description":"To configure Javelin\'s Trust & Safety Processor, you need to enable the trust & safety processors.","sidebar":"docsSidebar"},"javelin-python/cli":{"id":"javelin-python/cli","title":"Quickstart Guide","description":"Introduction","sidebar":"docsSidebar"},"javelin-python/exceptions":{"id":"javelin-python/exceptions","title":"Exceptions","description":"JavelinClientError","sidebar":"docsSidebar"},"javelin-python/javelinclient":{"id":"javelin-python/javelinclient","title":"JavelinClient","description":"JavelinClient class is designed to support both synchronous and asynchronous context managers. This means you can use the JavelinClient within a with statement to ensure resources are properly managed.","sidebar":"docsSidebar"},"javelin-python/models":{"id":"javelin-python/models","title":"Data Model","description":"\x3c!--","sidebar":"docsSidebar"},"javelin-python/python-api-reference":{"id":"javelin-python/python-api-reference","title":"Python SDK API Reference","description":"Complete API reference for the Javelin Python SDK including synchronous and asynchronous methods"},"javelin-python/python-quickstart":{"id":"javelin-python/python-quickstart","title":"Python SDK Quickstart Guide","description":"Get started with the Javelin Python SDK including installation, setup, provider configuration, route creation, and safety features","sidebar":"docsSidebar"},"javelin-videos/how-to-videos":{"id":"javelin-videos/how-to-videos","title":"How To Videos","description":"Watch to learn more about Javelin and its capabilities."},"javelin-webapp/threat-alerts/overview":{"id":"javelin-webapp/threat-alerts/overview","title":"Threat Alerts","description":"The Threat Alert Page provides a comprehensive overview of security threats identified during interactions with Language Models. It focuses on detecting and analyzing vulnerabilities such as prompt injections, jailbreak attempts, code/markdown content, restricted keywords, and exposures of sensitive data, including PII, PHI, and regex-based patterns. This page enables users to efficiently evaluate risks across different threat categories and take necessary actions to safeguard their systems and sensitive information.","sidebar":"docsSidebar"},"security":{"id":"security","title":"Security Architecture","description":"Comprehensive overview of Javelin\'s security measures including SOC 2 Type II certification, ISO 27001, data encryption, access controls, and compliance features","sidebar":"docsSidebar"}}}}')}}]);