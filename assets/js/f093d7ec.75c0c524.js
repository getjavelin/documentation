"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2966],{36314:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"javelin-processors/custom","title":"Extension Guardrails","description":"There are 2 components to building secure extension guardrails in Javelin:","source":"@site/docs/javelin-processors/custom.md","sourceDirName":"javelin-processors","slug":"/javelin-processors/custom","permalink":"/docs/javelin-processors/custom","draft":false,"unlisted":false,"editUrl":"https://github.com/getjavelin/documentation/tree/main/docs/javelin-processors/custom.md","tags":[],"version":"current","frontMatter":{}}');var o=r(74848),s=r(28453),i=r(3320);const a={},l="Extension Guardrails",d={},c=[{value:"Custom Processor Interface",id:"custom-processor-interface",level:2},{value:"Building a Custom Guardrail",id:"building-a-custom-guardrail",level:2},{value:"Golang",id:"golang",level:3},{value:"Step1: Install the dependencies",id:"step1-install-the-dependencies",level:4},{value:"Step2: Generate the stubs from the <code>.proto</code> file",id:"step2-generate-the-stubs-from-the-proto-file",level:4},{value:"Step 3: Implement the server",id:"step-3-implement-the-server",level:4},{value:"Python",id:"python",level:3},{value:"Step1: Install the dependencies",id:"step1-install-the-dependencies-1",level:4},{value:"Step2: Generate the stubs from the <code>.proto</code> file",id:"step2-generate-the-stubs-from-the-proto-file-1",level:4},{value:"Step3: Implement the server",id:"step3-implement-the-server",level:4},{value:"TypeScript",id:"typescript",level:3},{value:"Step1: Install the dependencies",id:"step1-install-the-dependencies-2",level:4},{value:"Step2: Generate the stubs from the <code>.proto</code> file",id:"step2-generate-the-stubs-from-the-proto-file-2",level:4},{value:"Step3: Implement the server",id:"step3-implement-the-server-1",level:4},{value:"Enabling the Custom Guardrail in Javelin",id:"enabling-the-custom-guardrail-in-javelin",level:2}];function p(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"extension-guardrails",children:"Extension Guardrails"})}),"\n","\n",(0,o.jsx)(n.p,{children:"There are 2 components to building secure extension guardrails in Javelin:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Extension Processor"}),"\n",(0,o.jsx)(n.li,{children:"Custom Guardrail Service"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"When incorporating extension guardrails, you will need to configure a special 'extension_processor' that will call the custom guardrail. The extension_processor is configured in Javelin's request or response chain to execute the custom guardrail and the GRPC endpoint for the custom guardrail is configured as input in the extension_processor configuration."}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Tip:"})," Extension guardrail endpoints should be implemented as GRPC services and configured in javelin for low latency and high throughput."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The extension_processor provides a convenient and flexible GRPC interface that allows you to implement custom guardrails in any language that supports GRPC. The extension_processor can be configured to call the custom guardrail service over GRPC."}),"\n",(0,o.jsx)(i.A,{language:"yaml",children:"    +---------+\n    | Javelin |\n    +---------+\n        |\n        v\n    +---------------------------------+\n    | +-----------+     +-----------+ |\n    | | Processor | --\x3e | Processor | |\n    | +-----------+     +-----------+ |\n    |        |              |         |\n    |        v              v         |\n    |    +--------------------------+ |\n    |    |    Extension_Processor   | |\n    |    +--------------------------+ |\n    +---------------------------------+\n                     |\n                     | GRPC\n                     v\n        +--------------------------+\n        | Custom Guardrail Service |\n        +--------------------------+"}),"\n",(0,o.jsx)(n.h2,{id:"custom-processor-interface",children:"Custom Processor Interface"}),"\n",(0,o.jsxs)(n.p,{children:["The GRPC interface consists of the following methods (",(0,o.jsx)(n.code,{children:"javelin_guardrail_intf.proto"}),"):"]}),"\n",(0,o.jsx)(i.A,{language:"go",children:'syntax = "proto3";\n\npackage api;\n\n// Specify the Go package where the generated files should reside\noption go_package = "javelin-core/pkg/chainprocessor/processor-sdk/api";\n\n// Define the Guardrail service\nservice Guardrail {\n    // Link the RPC method to the correct request and response message types\n    rpc Evaluate(GuardrailRequest) returns (GuardrailResponse) {}\n}\n\n// Enum for different content types\nenum ContentType {\n    CONTENT_TYPE_UNSPECIFIED = 0;  // Default value if not specified\n    CONTENT_TYPE_JSON = 1;         // application/json\n    CONTENT_TYPE_RAW_TEXT = 2;     // text/plain\n    CONTENT_TYPE_EMBEDDINGS = 3;   // application/embeddings\n    CONTENT_TYPE_JPEG = 4;         // image/jpeg\n    CONTENT_TYPE_MP4 = 5;          // video/mp4\n}\n\n// GuardrailRequest message contains content type, payload, headers, config, \n// and media data.\nmessage GuardrailRequest {\n    // Type of the media (e.g., "text/json", "text/raw", "image/jpeg", "video/mp4")\n    ContentType content_type = 1;\n\n    // Dictionary of body entries\n    string input_body = 2;\n\n    // Dictionary of configuration entries\n    map<string, string> config = 3;\n    \n    // Dictionary of header entries\n    map<string, string> headers = 4;\n\n    // Binary data for images or videos\n    bytes input_media = 5;\n}\n\n// GuardrailResponse message contains transformed content type, \n// body, response metadata, instructions, and media data.\nmessage GuardrailResponse {\n    // Dictionary of transformed body entries\n    string transformed_body = 1;\n\n    // Dictionary of response metadata\n    map<string, string> response_metadata = 2;\n\n    // Dictionary of header entries\n    map<string, string> headers = 3;\n\n    // Transformed binary data for images or videos\n    bytes transformed_media = 4;\n}'}),"\n",(0,o.jsxs)(n.p,{children:["Custom guardrails can be implemented in any language and are ideally expected to be hosted/deployed in the same cluster that is running Javelin for low latency access. The custom processor should implement the ",(0,o.jsx)(n.code,{children:"Guardrail"})," service defined in the ",(0,o.jsx)(n.code,{children:".proto"})," file."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"Evaluate"})," method should take a ",(0,o.jsx)(n.code,{children:"GuardrailRequest"})," as input and return a ",(0,o.jsx)(n.code,{children:"GuardrailResponse"})," as output."]}),"\n",(0,o.jsx)(n.h2,{id:"building-a-custom-guardrail",children:"Building a Custom Guardrail"}),"\n",(0,o.jsx)(n.p,{children:"You will first need to decide what language you plan to write your custom guardrail in. The custom guardrail can be written in any language that supports GRPC."}),"\n",(0,o.jsx)(n.h3,{id:"golang",children:"Golang"}),"\n",(0,o.jsx)(n.p,{children:"To build a custom guardrail in Golang, you will need to install the following dependencies:"}),"\n",(0,o.jsx)(n.h4,{id:"step1-install-the-dependencies",children:"Step1: Install the dependencies"}),"\n",(0,o.jsx)(i.A,{language:"bash",children:"go install google.golang.org/protobuf/cmd/protoc-gen-go@latest\ngo install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest"}),"\n",(0,o.jsxs)(n.h4,{id:"step2-generate-the-stubs-from-the-proto-file",children:["Step2: Generate the stubs from the ",(0,o.jsx)(n.code,{children:".proto"})," file"]}),"\n",(0,o.jsxs)(n.p,{children:["Next, you will need to generate the Golang code from the ",(0,o.jsx)(n.code,{children:".proto"})," file. You can use the following command to generate the Golang code:"]}),"\n",(0,o.jsx)(i.A,{language:"bash",children:"protoc --go_out=. --go-grpc_out=. javelin_guardrail_intf.proto"}),"\n",(0,o.jsx)(n.h4,{id:"step-3-implement-the-server",children:"Step 3: Implement the server"}),"\n",(0,o.jsx)(i.A,{language:"go",children:'package main\n\nimport (\n    "context"\n    "log"\n    "net"\n\n    "google.golang.org/grpc"\n    pb "path/to/your/generated/package" // Use the correct package path\n)\n\ntype server struct {\n    pb.UnimplementedGuardrailServer\n}\n\nfunc (s *server) Evaluate(ctx context.Context, in *pb.GuardrailRequest) (*pb.GuardrailResponse, error) {\n    response := &pb.GuardrailResponse{\n        TransformedBody: map[string]string{"message": "Processed: " + in.GetInputBody()["data"]},\n    }\n    return response, nil\n}\n\nfunc main() {\n    lis, err := net.Listen("tcp", ":50051")\n    if err != nil {\n        log.Fatalf("failed to listen: %v", err)\n    }\n    s := grpc.NewServer()\n    pb.RegisterGuardrailServer(s, &server{})\n    log.Printf("Server listening at %v", lis.Addr())\n    if err := s.Serve(lis); err != nil {\n        log.Fatalf("failed to serve: %v", err)\n    }\n}\n'}),"\n",(0,o.jsx)(n.h3,{id:"python",children:"Python"}),"\n",(0,o.jsx)(n.p,{children:"To build a custom guardrail in Python, you will need to install the following dependencies:"}),"\n",(0,o.jsx)(n.h4,{id:"step1-install-the-dependencies-1",children:"Step1: Install the dependencies"}),"\n",(0,o.jsx)(i.A,{language:"bash",children:"pip install grpcio grpcio-tools"}),"\n",(0,o.jsxs)(n.h4,{id:"step2-generate-the-stubs-from-the-proto-file-1",children:["Step2: Generate the stubs from the ",(0,o.jsx)(n.code,{children:".proto"})," file"]}),"\n",(0,o.jsxs)(n.p,{children:["Next, you will need to generate the Python code from the ",(0,o.jsx)(n.code,{children:".proto"})," file. You can use the following command to generate the Python code:"]}),"\n",(0,o.jsx)(i.A,{language:"bash",children:"python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. javelin_guardrail_intf.proto"}),"\n",(0,o.jsx)(n.h4,{id:"step3-implement-the-server",children:"Step3: Implement the server"}),"\n",(0,o.jsx)(n.p,{children:"Sample python grpc guardrail server:"}),"\n",(0,o.jsx)(i.A,{language:"python",children:'import grpc\nfrom concurrent import futures\nimport time\nimport test_guardrail_pb2\nimport test_guardrail_pb2_grpc\n\nclass GuardrailServicer(test_guardrail_pb2_grpc.GuardrailServicer):\n    def Evaluate(self, request, context):\n        print("Received request: ", request)\n        response = test_guardrail_pb2.GuardrailResponse()\n        response.transformed_body["output"] = "Hello from Python"\n        return response\n\nserver = grpc.server(futures.ThreadPoolExecutor(max_workers=10))\ntest_guardrail_pb2_grpc.add_GuardrailServicer_to_server(GuardrailServicer(), server)\nserver.add_insecure_port(\'[::]:50051\')\nserver.start()\nprint("Server started")\ntry:\n    while True:\n        time.sleep(86400)\nexcept KeyboardInterrupt:\n    server.stop(0)'}),"\n",(0,o.jsx)(n.h3,{id:"typescript",children:"TypeScript"}),"\n",(0,o.jsx)(n.p,{children:"To build a custom guardrail in TypeScript, you will need to install the following dependencies:"}),"\n",(0,o.jsx)(n.h4,{id:"step1-install-the-dependencies-2",children:"Step1: Install the dependencies"}),"\n",(0,o.jsx)(i.A,{language:"bash",children:"npm install @grpc/grpc-js @grpc/proto-loader"}),"\n",(0,o.jsxs)(n.h4,{id:"step2-generate-the-stubs-from-the-proto-file-2",children:["Step2: Generate the stubs from the ",(0,o.jsx)(n.code,{children:".proto"})," file"]}),"\n",(0,o.jsxs)(n.p,{children:["Next, you will need to generate the TypeScript code from the ",(0,o.jsx)(n.code,{children:".proto"})," file. You can use the following command to generate the\nTypeScript code:"]}),"\n",(0,o.jsx)(i.A,{language:"bash",children:"npm install -g grpc-tools\ngrpc_tools_node_protoc --js_out=import_style=commonjs,binary:./output     --grpc_out=grpc_js:./output     --ts_out=grpc_js:./output     -I ./proto path/to/your/javelin_guardrail_intf.proto"}),"\n",(0,o.jsx)(n.h4,{id:"step3-implement-the-server-1",children:"Step3: Implement the server"}),"\n",(0,o.jsx)(n.p,{children:"Sample TypeScript grpc guardrail server:"}),"\n",(0,o.jsx)(i.A,{language:"typescript",title:"gRPC Server Example",showLineNumbers:!0,children:"import * as grpc from '@grpc/grpc-js';\nimport * as protoLoader from '@grpc/proto-loader';\nimport { ProtoGrpcType } from './proto/test_guardrail'; // Adjust the import according to your generated file\n\nconst packageDefinition = protoLoader.loadSync('path/to/your/javelin_guardrail_intf.proto', {\n    keepCase: true,\n    longs: String,\n    enums: String,\n    defaults: true,\n    oneofs: true\n});\n\nconst protoDescriptor = grpc.loadPackageDefinition(packageDefinition) as unknown as ProtoGrpcType;\nconst testPlugin = protoDescriptor.test_plugin;\n\nfunction evaluate(call: grpc.ServerUnaryCall<pb.GuardrailRequest, pb.GuardrailResponse>, \ncallback: grpc.sendUnaryData<pb.GuardrailResponse>) {\n    const response: pb.GuardrailResponse = {\n        transformedBody: { message: 'Processed: ' + call.request.inputBody['data'] }\n    };\n    callback(null, response);\n}\n\nfunction getServer() {\n    const server = new grpc.Server();\n    server.addService(testPlugin.Guardrail.service, { evaluate: evaluate });\n    return server;\n}\n\nconst server = getServer();\nserver.bindAsync('0.0.0.0:50051', grpc.ServerCredentials.createInsecure(), (err, port) => {\n    if (err) {\n        console.error(`Server error: ${err.message}`);\n    } else {\n        console.log(`Server listening on ${port}`);\n        server.start();\n    }\n});\n"}),"\n",(0,o.jsx)(n.h2,{id:"enabling-the-custom-guardrail-in-javelin",children:"Enabling the Custom Guardrail in Javelin"}),"\n",(0,o.jsx)(n.p,{children:"To enable the custom guardrail in Javelin, you will need to configure the extension_processor in the Javelin configuration file. The extension_processor should be configured to call the custom guardrail service over GRPC."}),"\n",(0,o.jsx)(n.p,{children:"Add the following snippet in either the Request Chain or Response Chain configurations."}),"\n",(0,o.jsx)(i.A,{language:"python",children:'\n    {\n    "name": "Extension Processor",\n    "reference": "extension",\n    "will_block": true,\n    "inputs": {\n        "remote_url": "localhost:50051" // URL of the custom guardrail \n        }\n    },\n'})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}}}]);