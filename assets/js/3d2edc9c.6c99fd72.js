"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6574],{82223:(e,n,t)=>{t.d(n,{A:()=>o});t(96540);var a=t(18215);const r={tabItem:"tabItem_Ymn6"};var s=t(74848);function o(e){let{children:n,hidden:t,className:o}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.A)(r.tabItem,o),hidden:t,children:n})}},72206:(e,n,t)=>{t.d(n,{A:()=>A});var a=t(96540),r=t(18215),s=t(80052),o=t(56347),i=t(35793),l=t(99025),c=t(4430),p=t(44148);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}(t);return function(e){const n=(0,c.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const r=(0,o.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,l.aZ)(s),(0,a.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(r.location.search);n.set(s,e),r.replace({...r.location,search:n.toString()})}),[s,r])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,s=d(e),[o,l]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:s}))),[c,u]=m({queryString:t,groupId:r}),[g,v]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,s]=(0,p.Dv)(t);return[r,(0,a.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:r}),_=(()=>{const e=c??g;return h({value:e,tabValues:s})?e:null})();(0,i.A)((()=>{_&&l(_)}),[_]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!h({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),v(e)}),[u,v,s]),tabValues:s}}var v=t(75251);const _={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=t(74848);function y(e){let{className:n,block:t,selectedValue:a,selectValue:o,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),p=e=>{const n=e.currentTarget,t=l.indexOf(n),r=i[t].value;r!==a&&(c(n),o(r))},u=e=>{let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>{l.push(e)},onKeyDown:u,onClick:p,...s,className:(0,r.A)("tabs__item",_.tabItem,s?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function j(e){let{lazy:n,children:t,selectedValue:s}=e;const o=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===s));return e?(0,a.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function x(e){const n=g(e);return(0,f.jsxs)("div",{className:(0,r.A)("tabs-container",_.tabList),children:[(0,f.jsx)(y,{...n,...e}),(0,f.jsx)(j,{...n,...e})]})}function A(e){const n=(0,v.A)();return(0,f.jsx)(x,{...e,children:u(e.children)},String(n))}},34366:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>p,default:()=>m,frontMatter:()=>c,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"javelin-core/integration","title":"Applications","description":"Its easy to integrate applications that leverage LLMs with Javelin. We have made it easy to seamlessly connect your applications to route all LLM traffic through Javelin with minimal code changes.","source":"@site/docs/javelin-core/integration.md","sourceDirName":"javelin-core","slug":"/javelin-core/integration","permalink":"/docs/javelin-core/integration","draft":false,"unlisted":false,"editUrl":"https://github.com/getjavelin/documentation/tree/main/docs/javelin-core/integration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"someSidebar","previous":{"title":"Supported Language Models","permalink":"/docs/javelin-core/supported-llms"},"next":{"title":"Overview","permalink":"/docs/javelin-webapp/threat-alerts/overview"}}');var r=t(74848),s=t(28453),o=t(72206),i=t(82223),l=t(3320);const c={},p="Applications",u={},d=[{value:"Leveraging the Javelin Platform",id:"leveraging-the-javelin-platform",level:2},{value:"Querying an LLM",id:"querying-an-llm",level:2},{value:"REST API",id:"rest-api",level:3},{value:"Python",id:"python",level:3},{value:"JavaScript/TypeScript",id:"javascripttypescript",level:3}];function h(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"applications",children:"Applications"})}),"\n",(0,r.jsx)(n.p,{children:"Its easy to integrate applications that leverage LLMs with Javelin. We have made it easy to seamlessly connect your applications to route all LLM traffic through Javelin with minimal code changes."}),"\n",(0,r.jsx)(n.h2,{id:"leveraging-the-javelin-platform",children:"Leveraging the Javelin Platform"}),"\n",(0,r.jsxs)(n.p,{children:["The core usage of Javelin is to define routes, and then to define what to do at each route. Rather than having your LLM Applications (like Co-Pilot apps etc.,) individually & directly point to the LLM Vendor & Model (like OpenAI, Gemini etc.,), configure the provider/model endpoint to be your Javelin endpoint. This ensures that all applications that leverage AI Models will route their requests through the gateway. Javelin supports all the ",(0,r.jsx)(n.a,{href:"supported-llms",children:"latest models and providers"}),", so you don't have to make any changes to your application or how requests to models are sent."]}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"routeconfiguration",children:"Javelin Configuration"})," section, for details on how to setup routes on the gateway to different models and providers."]}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"../javelin-python/quickstart",children:"Python SDK"})," for details on how you can easily embed this within your AI Apps."]}),"\n",(0,r.jsx)(n.h2,{id:"querying-an-llm",children:"Querying an LLM"}),"\n",(0,r.jsx)(n.p,{children:"Javelin may send a request to one or more models based on the configured policies and route configurations and return back a response."}),"\n",(0,r.jsx)(n.h3,{id:"rest-api",children:"REST API"}),"\n",(0,r.jsxs)(o.A,{children:[(0,r.jsxs)(i.A,{value:"curl",label:"curl",children:[(0,r.jsxs)(n.p,{children:["First, create a route as shown in the ",(0,r.jsx)(n.a,{href:"../javelin-core/administration/createroute",children:"Create Route"})," section."]}),(0,r.jsx)(n.p,{children:"Once you have created a route, you can query it using the following curl command:"}),(0,r.jsx)(l.A,{language:"bash",children:'curl \'https://api-dev.javelin.live/v1/query/your_route_name\' \\\n  -H \'Content-Type: application/json\' \\\n  -H \'Authorization: Bearer YOUR_OPENAI_API_KEY\' \\\n  -H \'x-api-key: YOUR_JAVELIN_API_KEY\' \\\n  --data-raw \'{\n    "model": "gpt-3.5-turbo",\n    "messages": [\n      {"role": "user", "content": "SANFRANCISCO is located in?"}\n    ],\n    "temperature": 0.8\n  }\''}),(0,r.jsxs)(n.p,{children:["Make sure to replace ",(0,r.jsx)(n.code,{children:"your_route_name"}),", ",(0,r.jsx)(n.code,{children:"YOUR_OPENAI_API_KEY"}),", and ",(0,r.jsx)(n.code,{children:"YOUR_JAVELIN_API_KEY"})," with your actual values."]})]}),(0,r.jsxs)(i.A,{value:"python",label:"Python Requests",children:[(0,r.jsxs)(n.p,{children:["First, create a route as shown in the ",(0,r.jsx)(n.a,{href:"../javelin-core/administration/createroute",children:"Create Route"})," section."]}),(0,r.jsx)(n.p,{children:"Once you have created a route, you can query it using Python requests:"}),(0,r.jsx)(l.A,{language:"python",children:"import requests\nimport os\nimport dotenv\n\ndotenv.load_dotenv()\n\njavelin_api_key = os.getenv('JAVELIN_API_KEY')\nopenai_api_key = os.getenv('OPENAI_API_KEY')\nroute_name = 'your_route_name'\n\nurl = f'https://api-dev.javelin.live/v1/query/{route_name}'\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {openai_api_key}',\n    'x-api-key': javelin_api_key\n}\n\ndata = {\n    \"model\": \"gpt-3.5-turbo\",\n    \"messages\": [\n        {\"role\": \"user\", \"content\": \"SANFRANCISCO is located in?\"}\n    ],\n    \"temperature\": 0.8\n}\n\nresponse = requests.post(url, headers=headers, json=data)\n\nif response.status_code == 200:\n    print(response.json())\nelse:\n    print(f\"Error: {response.status_code}, {response.text}\")"}),(0,r.jsxs)(n.p,{children:["Make sure to replace ",(0,r.jsx)(n.code,{children:"your_route_name"})," with your actual route name and set the ",(0,r.jsx)(n.code,{children:"JAVELIN_API_KEY"})," and ",(0,r.jsx)(n.code,{children:"OPENAI_API_KEY"})," environment variables."]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"python",children:"Python"}),"\n",(0,r.jsxs)(o.A,{children:[(0,r.jsxs)(i.A,{value:"py1",label:"Javelin SDK",children:[(0,r.jsx)(l.A,{language:"python",children:"pip install javelin-sdk\n"}),(0,r.jsx)(l.A,{language:"python",title:"Query Route with Javelin SDK",showLineNumbers:!0,children:'from javelin_sdk import JavelinClient, JavelinConfig, Route\nimport os\n\njavelin_api_key = os.getenv(\'JAVELIN_API_KEY\')\nllm_api_key = os.getenv("OPENAI_API_KEY")\n\n# Create Javelin configuration\nconfig = JavelinConfig(\n    base_url="https://api-dev.javelin.live",\n    javelin_api_key=javelin_api_key,\n    llm_api_key=llm_api_key\n)\n\n# Create Javelin client\nclient = JavelinClient(config)\n\n# Route name to get is {routename} e.g., sampleroute1\nquery_data = {\n    "messages": [ \n        {\n            "role": "system",\n            "content": "Hello, you are a helpful scientific assistant."\n        },\n        {\n            "role": "user",\n            "content": "What is the chemical composition of sugar?"\n        }\n    ],\n    "temperature": 0.8\n}\n\n# Now query the route, for async use \'await client.aquery_route("sampleroute1", query_data)\'\nresponse = client.query_route("sampleroute1", query_data)\nprint(response.model_dump_json(indent=2))'})]}),(0,r.jsxs)(i.A,{value:"py2",label:"OpenAI",children:[(0,r.jsx)(l.A,{language:"python",children:"pip install openai\n"}),(0,r.jsx)(l.A,{language:"python",title:"Query and Stream Responses with OpenAI",showLineNumbers:!0,children:'from openai import OpenAI\nimport os\n\njavelin_api_key = os.environ[\'JAVELIN_API_KEY\']\nllm_api_key = os.environ["OPENAI_API_KEY"]\n\n# Javelin Headers\njavelin_headers = {\n    "x-api-key": javelin_api_key,       # Javelin API key from admin\n    "x-javelin-route": "sampleroute1"  # Javelin route to use\n}\n\n# Create OpenAI Client\nclient = OpenAI(api_key=llm_api_key,\n                base_url="https://api-dev.javelin.live/v1/query", # Set Javelin\'s API base URL for query\n                default_headers=javelin_headers)\n\n# Query the model\ncompletion = client.chat.completions.create(\n  model="gpt-3.5-turbo",\n  messages=[\n    {"role": "system", "content": "Hello, you are a helpful scientific assistant"},\n    {"role": "user", "content": "What is the chemical composition of sugar?"}\n  ]\n)\n\nprint(completion.model_dump_json(indent=2))\n\n# Streaming Responses\nstream = client.chat.completions.create(\n    model="gpt-3.5-turbo",\n    messages=[\n      {"role": "system", "content": "Hello, you are a helpful scientific assistant."},\n      {"role": "user", "content": "What is the chemical composition of sugar?"}\n    ],\n    stream=True\n)\n\nfor chunk in stream:\n    print(chunk.choices[0].delta.content or "", end="")'})]}),(0,r.jsxs)(i.A,{value:"py3",label:"Azure OpenAI",children:[(0,r.jsx)(l.A,{language:"shell",children:"pip install openai"}),(0,r.jsx)(l.A,{language:"python",title:"Query and Stream Responses with AzureOpenAI",showLineNumbers:!0,children:'from openai import AzureOpenAI\nimport os\n\n# Javelin Headers\njavelin_api_key = os.environ[\'JAVELIN_API_KEY\']\nllm_api_key = os.environ["AZURE_OPENAI_API_KEY"]\n\njavelin_headers = {\n    "x-api-key": javelin_api_key,     # Javelin API key from admin\n    "x-javelin-route": "sampleroute1" # Javelin route to use\n}\n\nclient = AzureOpenAI(api_key=llm_api_key,\n                     base_url="https://api-dev.javelin.live/v1/query", # Set Javelin\'s API base URL for query\n                     default_headers=javelin_headers,\n                     api_version="2023-07-01-preview")\n\ncompletion = client.chat.completions.create(\n  model="gpt-3.5-turbo",\n  messages=[\n    {"role": "system", "content": "Hello, you are a helpful scientific assistant."},\n    {"role": "user", "content": "What is the chemical composition of sugar?"}\n  ]\n)\n\nprint(completion.model_dump_json(indent=2))\n\n# Streaming Responses\nstream = client.chat.completions.create(\n    model="gpt-3.5-turbo",\n    messages=[\n      {"role": "system", "content": "Hello, you are a helpful scientific assistant."},\n      {"role": "user", "content": "What is the chemical composition of sugar?"}\n    ],\n    stream=True\n)\n\nfor chunk in stream:\n  if chunk.choices:\n    print(chunk.choices[0].delta.content or "", end="")'})]}),(0,r.jsxs)(i.A,{value:"py4",label:"LangChain",children:[(0,r.jsx)(l.A,{language:"shell",children:"pip install langchain\npip install langchain-openai"}),(0,r.jsx)(l.A,{language:"python",title:"LangChain with OpenAI Example",showLineNumbers:!0,children:'from langchain_openai import ChatOpenAI\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langchain_core.output_parsers import StrOutputParser\n\nimport os\n\njavelin_api_key = os.getenv(\'JAVELIN_API_KEY\')\nllm_api_key = os.getenv("OPENAI_API_KEY")\njavelin_headers = {\n    "x-api-key": javelin_api_key,      # Javelin API key from admin\n    "x-javelin-route": "sample_route1" # Javelin route to use\n}\n\nllm = ChatOpenAI(\n    openai_api_base="https://api-dev.javelin.live/v1/query", # Set Javelin\'s API base URL for query\n    openai_api_key=llm_api_key,\n    model_kwargs={\n      "extra_headers": javelin_headers\n    },\n)\n\nprompt = ChatPromptTemplate.from_messages([\n    ("system", "Hello, you are a helpful scientific assistant."),\n    ("user", "{input}")\n])\n\noutput_parser = StrOutputParser()\n\nchain = prompt | llm | output_parser\n\nprint(chain.invoke({"input": "What is the chemical composition of sugar?"}))\n'})]}),(0,r.jsx)(i.A,{value:"py7",label:"OpenAI-Compatible Query Example",children:(0,r.jsx)(l.A,{language:"python",title:"OpenAI-Compatible Model Adapters Example",showLineNumbers:!0,children:'\n#This example demonstrates how Javelin uses OpenAI\'s schema as a standardized interface for different LLM providers. \n#By adopting OpenAI\'s widely-used request/response format, Javelin enables seamless integration with various LLM providers \n#(like Anthropic, Bedrock, Mistral, etc.) while maintaining a consistent API structure. This allows developers to use the \n#same code pattern regardless of the underlying model provider, with Javelin handling the necessary translations and adaptations behind the scenes.\n\nfrom javelin_sdk import JavelinClient, JavelinConfig\nimport os\nfrom typing import Dict, Any\nimport json\n\n# Helper function to pretty print responses\ndef print_response(provider: str, response: Dict[str, Any]) -> None:\n    print(f"\n=== Response from {provider} ===")\n    print(json.dumps(response, indent=2))\n\n# Setup client configuration\nconfig = JavelinConfig(\n    base_url="https://api-dev.javelin.live",\n    javelin_api_key=os.getenv(\'JAVELIN_API_KEY\'),\n    llm_api_key=os.getenv(\'OPENAI_API_KEY\')\n)\nclient = JavelinClient(config)\n\n# Example messages in OpenAI format\nmessages = [\n    {"role": "system", "content": "You are a helpful assistant."},\n    {"role": "user", "content": "What are the three primary colors?"}\n]\n\n# 1. Query OpenAI route\ntry:\n    openai_response = client.chat.completions.create(\n        route="openai_route",  # Route configured for OpenAI\n        messages=messages,\n        temperature=0.7,\n        max_tokens=150\n    )\n    print_response("OpenAI", openai_response)\nexcept Exception as e:\n    print(f"OpenAI query failed: {str(e)}")\n    \n=== Response from OpenAI ===\n"""\n{\n  "id": "chatcmpl-123abc",\n  "object": "chat.completion",\n  "created": 1677858242,\n  "model": "gpt-3.5-turbo",\n  "usage": {\n    "prompt_tokens": 42,\n    "completion_tokens": 38,\n    "total_tokens": 80\n  },\n  "choices": [\n    {\n      "message": {\n        "role": "assistant",\n        "content": "The three primary colors are red, blue, and yellow."\n      },\n      "finish_reason": "stop",\n      "index": 0\n    }\n  ]\n}\n"""\n# 2. Query Bedrock route (using same OpenAI format)\ntry:\n    bedrock_response = client.chat.completions.create(\n        route="bedrock_route",  # Route configured for Bedrock\n        messages=messages,\n        temperature=0.7,\n        max_tokens=150\n    )\n    print_response("Bedrock", bedrock_response)\nexcept Exception as e:\n    print(f"Bedrock query failed: {str(e)}")\n"""\n=== Response from Bedrock ===\n{\n  "id": "bedrock-123xyz",\n  "object": "chat.completion",\n  "created": 1677858243,\n  "model": "anthropic.claude-v2",\n  "usage": {\n    "prompt_tokens": 42,\n    "completion_tokens": 41,\n    "total_tokens": 83\n  },\n  "choices": [\n    {\n      "message": {\n        "role": "assistant",\n        "content": "The three primary colors are red, blue, and yellow. These colors cannot be created by mixing other colors together."\n      },\n      "finish_reason": "stop",\n      "index": 0\n    }\n  ]\n}\n"""\n\n# Example using text completions with Llama\ntry:\n    llama_response = client.completions.create(\n        route="bedrockllama",  # Route configured for Bedrock Llama\n        prompt="Write a haiku about programming:",\n        max_tokens=50,\n        temperature=0.7,\n        top_p=0.9,\n    )\n    print("=== Llama Text Completion Response ===")\n    pretty_print(llama_response)\nexcept Exception as e:\n    print(f"Llama query failed: {str(e)}")\n\n"""\n=== Llama Text Completion Response ===\n{\n  "id": "bedrock-comp-123xyz",\n  "object": "text_completion",\n  "created": 1677858244,\n  "model": "meta.llama2-70b",\n  "choices": [\n    {\n      "text": "Code flows like water\\nBugs crawl through silent errors\\nDebugger saves all",\n      "index": 0,\n      "finish_reason": "stop"\n    }\n  ],\n  "usage": {\n    "prompt_tokens": 6,\n    "completion_tokens": 15,\n    "total_tokens": 21\n  }\n}\n"""\n\n'})}),(0,r.jsxs)(i.A,{value:"py5",label:"DSPy",children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Introduction:"})," ",(0,r.jsx)(n.a,{href:"https://towardsdatascience.com/intro-to-dspy-goodbye-prompting-hello-programming-4ca1c6ce3eb9",children:"DSPy: Goodbye Prompting, Hello Programming!"}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Documentation:"})," ",(0,r.jsx)(n.a,{href:"https://dspy-docs.vercel.app/",children:"DSPy Docs"})]}),(0,r.jsx)(l.A,{language:"shell",children:"pip install dspy-ai"}),(0,r.jsx)(l.A,{language:"py",title:"Using DSPY with Javelin",showLineNumbers:!0,children:'import dspy\nfrom dsp import LM\nimport os\nimport requests\n\n# Assuming the environment variables are set correctly\njavelin_api_key = os.getenv(\'JAVELIN_API_KEY\')\nllm_api_key = os.getenv("OPENAI_API_KEY")\n\nclass Javelin(LM):\n    def __init__(self, model, api_key):\n        self.model = model\n        self.api_key = api_key\n        self.provider = "default"\n        self.kwargs = { \n                    "temperature": 1.0, \n                    "max_tokens": 500, \n                    "top_p": 1.0, \n                    "frequency_penalty": 0.0, \n                    "presence_penalty": 0.0, \n                    "stop": None, \n                    "n": 1, \n                    "logprobs": None, \n                    "logit_bias": None,\n                    "stream": False\n        }\n\n        self.base_url = "https://api-dev.javelin.live/v1/query/" # Set Javelin\'s API base URL for query\n        self.javelin_headers = {\n                    "Content-Type": "application/json",\n                    "Authorization": f"Bearer { api_key }",\n                    "x-javelin-route": "openai", # route name configured for OpenAI\n                    "x-api-key": javelin_api_key,\n        }\n\n        self.history = []\n\n    def basic_request(self, prompt: str, **kwargs):\n        headers = self.javelin_headers\n\n        data = {\n            **kwargs,\n            "model": self.model,\n            "messages": [\n                {"role": "user", "content": prompt}\n            ]\n        }\n\n        response = requests.post(self.base_url, headers=headers, json=data)\n        response = response.json()\n\n        self.history.append({\n            "prompt": prompt,\n            "response": response,\n            "kwargs": kwargs,\n        })\n        return response\n\n    def __call__(self, prompt, only_completed=True, return_sorted=False, **kwargs):\n        response = self.request(prompt, **kwargs)\n        if \'choices\' in response and len(response[\'choices\']) > 0:\n            first_choice_content = response[\'choices\'][0][\'message\'][\'content\']\n            completions = [first_choice_content]\n            return completions\n        else:\n            return ["No response found."]\n\njavelin = Javelin(model="gpt-4-1106-preview", api_key=llm_api_key)\ndspy.configure(lm=javelin)\n\n# Define a module (ChainOfThought) and assign it a signature (return an answer, given a question).\nqa = dspy.ChainOfThought(\'question -> answer\')\nresponse = qa(question="You have 3 baskets. The first basket has twice as many apples as the second basket. The third basket has 3 fewer apples than the first basket. If you have a total of 27 apples, how many apples are in each basket?")\nprint(response)'})]}),(0,r.jsxs)(i.A,{value:"py6",label:"Bedrock",children:[(0,r.jsx)(l.A,{language:"shell",children:"pip install boto3"}),(0,r.jsx)(l.A,{language:"python",title:"AWS Bedrock Integration Example - Boto3",showLineNumbers:!0,children:'import boto3\n\n# Configure boto3 client\nclient = boto3.client(\n    service_name="bedrock-runtime",\n    region_name="us-east-1",\n    endpoint_url="https://api-dev.javelin.live/v1/",\n)\n\ndef add_custom_headers(request, **kwargs):\n    headers = {\n        "x-api-key": f"{JAVELIN_API_KEY}"\n    }\n    request.headers.update(headers)\n\nclient.meta.events.register(\'before-send.*.*\', add_custom_headers)\n\n# Example using Claude model via Bedrock\nresponse = client.invoke_model_with_response_stream(\n    modelId="anthropic.claude-v2:1",\n    body={\n        "anthropic_version": "bedrock-2023-05-31",\n        "max_tokens": 100,\n        "messages": [\n            {\n                "content": "What is machine learning?",\n                "role": "user"\n            }\n        ]\n    },\n    contentType="application/json"\n)\n\nfor event in response[\'body\']:\n    print(event)'}),(0,r.jsx)(l.A,{language:"python",title:"AWS Bedrock Integration Example - LangChain",showLineNumbers:!0,children:'# Example using Langchain \n\n# Use the boto3 client to create a BedrockLLM\nllm = BedrockLLM(\n    client=client,\n    model_id="anthropic.claude-v2:1",\n    model_kwargs={\n        "max_tokens_to_sample": 256,\n        "temperature": 0.7,\n    }\n)\n\nstream_generator = llm.stream(prompt_text)\nfor chunk in stream_generator:\n    print(chunk)'}),(0,r.jsxs)(n.p,{children:["Learn more about how to setup Bedrock routes to use these examples ",(0,r.jsx)(n.a,{href:"../javelin-core/administration/createbedrockroutes",children:"here"}),"."]})]}),(0,r.jsx)(i.A,{value:"py8",label:"...",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://www.llamaindex.ai/open-source",children:"LlamaIndex"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://docs.datastax.com/en/ragstack/docs/index.html",children:"DataStax RAGStack"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://jxnl.github.io/instructor/",children:"Instructor, Generating Structure from LLMs"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://microsoft.github.io/promptflow/index.html#",children:"Microsoft Prompt flow"})}),"\n"]}),"\n"]})})]}),"\n",(0,r.jsx)(n.h3,{id:"javascripttypescript",children:"JavaScript/TypeScript"}),"\n",(0,r.jsxs)(o.A,{children:[(0,r.jsxs)(i.A,{value:"js1",label:"OpenAI",children:[(0,r.jsx)(l.A,{language:"python",children:"npm install openai\n"}),(0,r.jsx)(l.A,{language:"js",title:"OpenAI API Integration Example",showLineNumbers:!0,children:'import OpenAI from "openai";\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n  baseURL: "https://api-dev.javelin.live/v1/query",\n  defaultHeaders: {\n    "x-api-key": `${process.env.JAVELIN_API_KEY}`,\n    "x-javelin-route": "sample_route1",\n  },\n});\n\nasync function main() {\n  const completion = await openai.chat.completions.create({\n    messages: [{ role: "system", content: "You are a helpful assistant." }],\n    model: "gpt-3.5-turbo",\n  });\n\n  console.log(completion.choices[0]);\n}\n\nmain();'})]}),(0,r.jsxs)(i.A,{value:"js2",label:"Langchain",children:[(0,r.jsx)(l.A,{language:"python",children:"npm install @langchain/openai\n"}),(0,r.jsx)(l.A,{language:"js",title:"LangChain OpenAI Integration Example",showLineNumbers:!0,children:'import { ChatOpenAI } from \'@langchain/openai\';\n\nconst llm = new ChatOpenAI({\n    openAIApiKey: process.env.OPENAI_API_KEY,\n    configuration: {\n        basePath: "https://api-dev.javelin.live/v1/query",\n        defaultHeaders: {\n          "x-api-key": `${process.env.JAVELIN_API_KEY}`,\n          "x-javelin-route": "sample_route1",\n        },\n    },\n});\n\nasync function main() {\n  const response = await llm.invoke("tell me a joke?");\n  console.log(response);\n}\n\nmain();'})]}),(0,r.jsxs)(i.A,{value:"js3",label:"Bedrock",children:[(0,r.jsx)(l.A,{language:"js",title:"AWS Bedrock Integration Example",showLineNumbers:!0,children:'import { BedrockRuntimeClient, InvokeModelCommand, InvokeModelWithResponseStreamCommand } from "@aws-sdk/client-bedrock-runtime";\n\nconst customHeaders = {\n  \'x-api-key\': JAVELIN_API_KEY\n};\n\nconst client = new BedrockRuntimeClient({\n  region: AWS_REGION,\n  // Use the javelin endpoint for bedrock\n  endpoint: JAVELIN_ENDPOINT,\n  credentials: {\n    accessKeyId: AWS_ACCESS_KEY_ID,\n    secretAccessKey: AWS_SECRET_ACCESS_KEY,\n  },\n});\n\n// Add custom headers via middleware\nclient.middlewareStack.add(\n  (next, context) => async (args) => {\n    args.request.headers = {\n      ...args.request.headers,\n      ...customHeaders\n    };\n    return next(args);\n  },\n  {\n    step: "build"\n  }\n);\n\n\n\n// Query the model\nconst payload = {\n  anthropic_version: "bedrock-2023-05-31",\n  max_tokens: 1000,\n  messages: [\n    {\n      role: "user",\n      content: "What is machine learning?",\n    },\n  ],\n};\n\n\nconst command = new InvokeModelWithResponseStreamCommand({\n  contentType: "application/json",\n  body: JSON.stringify(payload),\n  "anthropic.claude-v2:1",\n});\n\nconst apiResponse = await client.send(command);\n\nfor await (const item of apiResponse.body) {\n  console.log(item);\n}\n\n'}),(0,r.jsxs)(n.p,{children:["Learn more about how to setup Bedrock routes to use these examples ",(0,r.jsx)(n.a,{href:"../javelin-core/administration/createbedrockroutes",children:"here"}),"."]})]}),(0,r.jsxs)(i.A,{value:"js4",label:"...",children:[(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://sdk.vercel.ai/docs",children:"Vercel AI SDK"})," -> ",(0,r.jsx)(n.a,{href:"https://vercel.com/blog/ai-integrations",children:"AI Integrations on Vercel"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/huggingface/chat-ui",children:"Hugging Face ChatUI"})," -> ",(0,r.jsx)(n.a,{href:"https://github.com/huggingface/chat-ui?tab=readme-ov-file#running-your-own-models-using-a-custom-endpoint",children:"Running using a custom endpoint"})]}),"\n"]}),"\n"]}),(0,r.jsxs)(n.p,{children:["We have worked on the integrations. Please contact: ",(0,r.jsx)(n.a,{href:"mailto:support@getjavelin.io",children:"support@getjavelin.io"})," if you would like to use this feature."]})]})]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);