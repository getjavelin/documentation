"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3641],{82223:(e,n,i)=>{i.d(n,{A:()=>o});i(96540);var t=i(18215);const r={tabItem:"tabItem_Ymn6"};var s=i(74848);function o(e){let{children:n,hidden:i,className:o}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,t.A)(r.tabItem,o),hidden:i,children:n})}},72206:(e,n,i)=>{i.d(n,{A:()=>A});var t=i(96540),r=i(18215),s=i(80052),o=i(56347),a=i(35793),l=i(99025),d=i(4430),c=i(44148);function p(e){return t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:i}=e;return(0,t.useMemo)((()=>{const e=n??function(e){return p(e).map((e=>{let{props:{value:n,label:i,attributes:t,default:r}}=e;return{value:n,label:i,attributes:t,default:r}}))}(i);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,i])}function u(e){let{value:n,tabValues:i}=e;return i.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:i}=e;const r=(0,o.W6)(),s=function(e){let{queryString:n=!1,groupId:i}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!i)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return i??null}({queryString:n,groupId:i});return[(0,l.aZ)(s),(0,t.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(r.location.search);n.set(s,e),r.replace({...r.location,search:n.toString()})}),[s,r])]}function j(e){const{defaultValue:n,queryString:i=!1,groupId:r}=e,s=h(e),[o,l]=(0,t.useState)((()=>function(e){let{defaultValue:n,tabValues:i}=e;if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!u({value:n,tabValues:i}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${i.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=i.find((e=>e.default))??i[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:s}))),[d,p]=m({queryString:i,groupId:r}),[j,v]=function(e){let{groupId:n}=e;const i=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,s]=(0,c.Dv)(i);return[r,(0,t.useCallback)((e=>{i&&s.set(e)}),[i,s])]}({groupId:r}),x=(()=>{const e=d??j;return u({value:e,tabValues:s})?e:null})();(0,a.A)((()=>{x&&l(x)}),[x]);return{selectedValue:o,selectValue:(0,t.useCallback)((e=>{if(!u({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),v(e)}),[p,v,s]),tabValues:s}}var v=i(75251);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=i(74848);function y(e){let{className:n,block:i,selectedValue:t,selectValue:o,tabValues:a}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.a_)(),c=e=>{const n=e.currentTarget,i=l.indexOf(n),r=a[i].value;r!==t&&(d(n),o(r))},p=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const i=l.indexOf(e.currentTarget)+1;n=l[i]??l[0];break}case"ArrowLeft":{const i=l.indexOf(e.currentTarget)-1;n=l[i]??l[l.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":i},n),children:a.map((e=>{let{value:n,label:i,attributes:s}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>{l.push(e)},onKeyDown:p,onClick:c,...s,className:(0,r.A)("tabs__item",x.tabItem,s?.className,{"tabs__item--active":t===n}),children:i??n},n)}))})}function f(e){let{lazy:n,children:i,selectedValue:s}=e;const o=(Array.isArray(i)?i:[i]).filter(Boolean);if(n){const e=o.find((e=>e.props.value===s));return e?(0,t.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:o.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function _(e){const n=j(e);return(0,g.jsxs)("div",{className:(0,r.A)("tabs-container",x.tabList),children:[(0,g.jsx)(y,{...n,...e}),(0,g.jsx)(f,{...n,...e})]})}function A(e){const n=(0,v.A)();return(0,g.jsx)(_,{...e,children:p(e.children)},String(n))}},29545:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>m,frontMatter:()=>d,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"javelin-core/integration-new","title":"Integrating Applications","description":"Routes & Unified Endpoints","source":"@site/docs/javelin-core/integration-new.md","sourceDirName":"javelin-core","slug":"/javelin-core/integration-new","permalink":"/docs/javelin-core/integration-new","draft":false,"unlisted":false,"editUrl":"https://github.com/getjavelin/documentation/tree/main/docs/javelin-core/integration-new.md","tags":[],"version":"current","frontMatter":{},"sidebar":"someSidebar","previous":{"title":"Supported Language Models","permalink":"/docs/javelin-core/supported-llms"},"next":{"title":"Overview","permalink":"/docs/javelin-webapp/threat-alerts/overview"}}');var r=i(74848),s=i(28453),o=i(72206),a=i(82223),l=i(3320);const d={},c="Integrating Applications",p={},h=[{value:"Routes &amp; Unified Endpoints",id:"routes--unified-endpoints",level:2},{value:"Overview",id:"overview",level:2},{value:"Getting Started with Javelin Integration",id:"getting-started-with-javelin-integration",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Leveraging the Javelin Platform",id:"leveraging-the-javelin-platform",level:2},{value:"Unified Endpoints Architecture",id:"unified-endpoints-architecture",level:2},{value:"Key Benefits",id:"key-benefits",level:3},{value:"Endpoint Types Overview",id:"endpoint-types-overview",level:3},{value:"Endpoint Breakdown",id:"endpoint-breakdown",level:2},{value:"1. OpenAI-Compatible Endpoints",id:"1-openai-compatible-endpoints",level:3},{value:"Available Endpoints",id:"available-endpoints",level:4},{value:"Example: Chat Completions",id:"example-chat-completions",level:4},{value:"Provider Compatibility",id:"provider-compatibility",level:4},{value:"2. Azure OpenAI API Endpoints",id:"2-azure-openai-api-endpoints",level:3},{value:"Available Endpoints",id:"available-endpoints-1",level:4},{value:"Path Parameters",id:"path-parameters",level:4},{value:"Example: Azure Chat Completions",id:"example-azure-chat-completions",level:4},{value:"3. AWS Bedrock API Endpoints",id:"3-aws-bedrock-api-endpoints",level:3},{value:"Available Endpoints",id:"available-endpoints-2",level:4},{value:"Path Parameters",id:"path-parameters-1",level:4},{value:"Example: AWS Bedrock Model Request",id:"example-aws-bedrock-model-request",level:4},{value:"4. Query Endpoints",id:"4-query-endpoints",level:3},{value:"Available Endpoints",id:"available-endpoints-3",level:4},{value:"Path Parameters",id:"path-parameters-2",level:4},{value:"Example: Query Route",id:"example-query-route",level:4},{value:"SDK Integration Examples",id:"sdk-integration-examples",level:2},{value:"Python",id:"python",level:3},{value:"JavaScript/TypeScript",id:"javascripttypescript",level:3},{value:"Authentication",id:"authentication",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3}];function u(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"integrating-applications",children:"Integrating Applications"})}),"\n",(0,r.jsx)(n.h2,{id:"routes--unified-endpoints",children:"Routes & Unified Endpoints"}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"Javelin provides a powerful routing system that allows you to seamlessly integrate your LLM applications with various AI providers while adding security, monitoring, and guardrails. This guide explains how to integrate your applications with Javelin and leverage its unified endpoint architecture."}),"\n",(0,r.jsx)("img",{className:"img-responsive",src:i(20249).A,alt:"Javelin Integration"}),"\n",(0,r.jsx)(n.h2,{id:"getting-started-with-javelin-integration",children:"Getting Started with Javelin Integration"}),"\n",(0,r.jsx)(n.p,{children:"Integrating your applications with Javelin involves three simple steps:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configure Javelin Routes"}),": Set up routes in your Javelin gateway to direct traffic to specific models and providers."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Update API Endpoints"}),": Change your application's API endpoints to point to Javelin instead of directly to providers."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Add Authentication"}),": Include your Javelin API key alongside your provider API keys."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.p,{children:"Before you begin integration, ensure you have:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A Javelin account with API access"}),"\n",(0,r.jsx)(n.li,{children:"Your Javelin API key"}),"\n",(0,r.jsx)(n.li,{children:"API keys for the LLM providers you plan to use (OpenAI, Azure, etc.)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"leveraging-the-javelin-platform",children:"Leveraging the Javelin Platform"}),"\n",(0,r.jsx)(n.p,{children:"The core usage of Javelin is to define routes, and then to define what to do at each route. Rather than having your LLM Applications (like Co-Pilot apps, chatbots, etc.) individually and directly point to the LLM Vendor & Model (like OpenAI, Gemini, etc.), configure the provider/model endpoint to be your Javelin endpoint."}),"\n",(0,r.jsx)(n.p,{children:"This architecture ensures that all applications that leverage AI Models will route their requests through the Javelin gateway, providing:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Centralized security and access control"}),"\n",(0,r.jsx)(n.li,{children:"Consistent monitoring and observability"}),"\n",(0,r.jsx)(n.li,{children:"Standardized guardrails and safety measures"}),"\n",(0,r.jsx)(n.li,{children:"Simplified provider switching and fallback options"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Javelin supports all the ",(0,r.jsx)(n.a,{href:"https://docs.getjavelin.io/docs/javelin-core/supported-llms",children:"latest models and providers"}),", so you don't have to make any changes to your application or how requests to models are sent."]}),"\n",(0,r.jsxs)(n.p,{children:["See the ",(0,r.jsx)(n.a,{href:"https://docs.getjavelin.io/docs/javelin-core/administration/createroute",children:"Javelin Configuration"})," section for details on how to set up routes on the gateway to different models and providers."]}),"\n",(0,r.jsxs)(n.p,{children:["For programmatic integration, see the ",(0,r.jsx)(n.a,{href:"https://docs.getjavelin.io/docs/javelin-python/quickstart",children:"Python SDK"})," documentation for details on how you can easily embed Javelin within your AI applications."]}),"\n",(0,r.jsx)(n.h2,{id:"unified-endpoints-architecture",children:"Unified Endpoints Architecture"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.strong,{children:"Unified Endpoints"})," provide a consistent API interface that abstracts the provider-specific details of various AI services. This standardization offers several key benefits:"]}),"\n",(0,r.jsx)(n.h3,{id:"key-benefits",children:"Key Benefits"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Single Entry Points"}),': Instead of routing to different URLs for each provider, you call standardized "unified" endpoints with specific route parameters or path segments.']}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Consistent Request/Response Shapes"}),": All requests follow a uniform structure (for example, a JSON object with a ",(0,r.jsx)(n.code,{children:"prompt"}),", ",(0,r.jsx)(n.code,{children:"messages"}),", or ",(0,r.jsx)(n.code,{children:"input"})," for embeddings). The service then translates it to each provider's specific API format as needed."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Provider Flexibility"}),": Switch between providers without changing your application code."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Simplified Authentication"}),": Use a consistent authentication pattern across all providers."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"endpoint-types-overview",children:"Endpoint Types Overview"}),"\n",(0,r.jsx)(n.p,{children:"Javelin supports four main types of endpoints:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Endpoint Type"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Use Case"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"OpenAI-Compatible"}),(0,r.jsx)(n.td,{children:"Standard OpenAI API format"}),(0,r.jsx)(n.td,{children:"General text generation, chat, and embeddings"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Azure OpenAI"}),(0,r.jsx)(n.td,{children:"Azure-specific deployment model"}),(0,r.jsx)(n.td,{children:"Enterprise Azure OpenAI deployments"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"AWS Bedrock"}),(0,r.jsx)(n.td,{children:"AWS-specific model routing"}),(0,r.jsx)(n.td,{children:"AWS Bedrock model access"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Query"}),(0,r.jsx)(n.td,{children:"Generic route-based access"}),(0,r.jsx)(n.td,{children:"Custom routing configurations"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"endpoint-breakdown",children:"Endpoint Breakdown"}),"\n",(0,r.jsx)(n.h3,{id:"1-openai-compatible-endpoints",children:"1. OpenAI-Compatible Endpoints"}),"\n",(0,r.jsx)(n.p,{children:"These endpoints mirror the standard OpenAI API methods. They allow you to perform common AI tasks such as generating text completions, handling chat-based requests, or producing embeddings."}),"\n",(0,r.jsx)(n.h4,{id:"available-endpoints",children:"Available Endpoints"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Endpoint"}),(0,r.jsx)(n.th,{children:"Method"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/completions"})}),(0,r.jsx)(n.td,{children:"POST"}),(0,r.jsx)(n.td,{children:"Request text completions from the provider"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/chat/completions"})}),(0,r.jsx)(n.td,{children:"POST"}),(0,r.jsx)(n.td,{children:"Request chat-based completions (ideal for conversational interfaces)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/embeddings"})}),(0,r.jsx)(n.td,{children:"POST"}),(0,r.jsx)(n.td,{children:"Generate embeddings for provided text data"})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"example-chat-completions",children:"Example: Chat Completions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl -X POST "https://your-javelin-domain.com/v1/chat/completions" \\\n  -H "Content-Type: application/json" \\\n  -H "Authorization: Bearer $YOUR_LLM_API_KEY" \\\n  -H "X-Javelin-apikey: $YOUR_JAVELIN_API_KEY" \\\n  -H "X-Javelin-route: $JAVELIN_ROUTE_OPENAI_COMPATIBLE" \\\n  -d \'{\n    "model": "gpt-3.5-turbo",\n    "messages": [\n      {"role": "system", "content": "You are a helpful assistant."},\n      {"role": "user", "content": "Tell me about Javelin."}\n    ],\n    "temperature": 0.7,\n    "max_tokens": 150\n  }\'\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": Replace ",(0,r.jsx)(n.code,{children:"your-javelin-domain.com"})," with your actual Javelin API domain, and insert your actual API keys."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"provider-compatibility",children:"Provider Compatibility"}),"\n",(0,r.jsx)(n.p,{children:"You can use these endpoints with any OpenAI-compatible provider by specifying the appropriate model name. Supported providers include:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"OpenAI"}),"\n",(0,r.jsx)(n.li,{children:"Azure OpenAI"}),"\n",(0,r.jsx)(n.li,{children:"Mistral AI"}),"\n",(0,r.jsx)(n.li,{children:"Anthropic (Claude)"}),"\n",(0,r.jsx)(n.li,{children:"Cohere"}),"\n",(0,r.jsx)(n.li,{children:"DeepSeek"}),"\n",(0,r.jsx)(n.li,{children:"And more"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2-azure-openai-api-endpoints",children:"2. Azure OpenAI API Endpoints"}),"\n",(0,r.jsx)(n.p,{children:"For providers using Azure's deployment model, endpoints include additional parameters for deployment management."}),"\n",(0,r.jsx)(n.h4,{id:"available-endpoints-1",children:"Available Endpoints"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Endpoint"}),(0,r.jsx)(n.th,{children:"Method"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/openai/deployments/{deployment}/completions"})}),(0,r.jsx)(n.td,{children:"POST"}),(0,r.jsx)(n.td,{children:"Request text completions from Azure deployment"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/openai/deployments/{deployment}/chat/completions"})}),(0,r.jsx)(n.td,{children:"POST"}),(0,r.jsx)(n.td,{children:"Request chat-based completions from Azure deployment"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/openai/deployments/{deployment}/embeddings"})}),(0,r.jsx)(n.td,{children:"POST"}),(0,r.jsx)(n.td,{children:"Generate embeddings from Azure deployment"})]})]})]}),"\n",(0,r.jsx)(n.h4,{id:"path-parameters",children:"Path Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"providername"}),": The Azure OpenAI provider identifier"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"deployment"}),": The deployment ID configured in Azure"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-azure-chat-completions",children:"Example: Azure Chat Completions"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl -X POST "https://your-javelin-domain.com/v1/deployments/my-deployment/chat/completions?api-version=2024-02-15-preview" \\\n  -H "Content-Type: application/json" \\\n  -H "api-key: $YOUR_AZURE_OPENAI_API_KEY" \\\n  -H "X-Javelin-apikey: $YOUR_JAVELIN_API_KEY" \\\n  -H "X-Javelin-route: $JAVELIN_ROUTE_AZURE_OPENAI" \\\n  -d \'{\n    "messages": [\n      {"role": "user", "content": "Tell me a story"}\n    ],\n    "max_tokens": 50\n  }\'\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-aws-bedrock-api-endpoints",children:"3. AWS Bedrock API Endpoints"}),"\n",(0,r.jsx)(n.p,{children:"For AWS Bedrock\u2013style providers, the endpoints use a slightly different URL pattern to accommodate model versioning and extended routing."}),"\n",(0,r.jsx)(n.h4,{id:"available-endpoints-2",children:"Available Endpoints"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Endpoint"}),(0,r.jsx)(n.th,{children:"Method"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/model/{routename}/{apivariation}"})}),(0,r.jsx)(n.td,{children:"POST"}),(0,r.jsx)(n.td,{children:"Route requests to a specific AWS Bedrock model and API variation"})]})})]}),"\n",(0,r.jsx)(n.h4,{id:"path-parameters-1",children:"Path Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"routename"}),": The model or route name (identifies a specific AWS Bedrock model)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"apivariation"}),': A parameter to indicate the API variation ("Invoke", "Invoke-Stream", "Invoke-With-Response-Stream", "Converse", "Converse-Stream") or version']}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-aws-bedrock-model-request",children:"Example: AWS Bedrock Model Request"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl -X POST "https://your-javelin-domain.com/v1/model/anthropic.claude-3-sonnet-20240229-v1:0/invoke" \\\n  -H "Content-Type: application/json" \\\n  -H "X-Javelin-apikey: $YOUR_JAVELIN_API_KEY" \\\n  -H "X-Javelin-route: $JAVELIN_ROUTE_BEDROCK" \\\n  -d \'{\n    "anthropic_version": "bedrock-2023-05-31",\n    "max_tokens": 100,\n    "messages": [\n      {\n        "content": "What is the capital of France?",\n        "role": "user"\n      }\n    ]\n  }\'\n'})}),"\n",(0,r.jsx)(n.h3,{id:"4-query-endpoints",children:"4. Query Endpoints"}),"\n",(0,r.jsx)(n.p,{children:"These endpoints allow direct querying of predefined routes, bypassing provider-specific names when a generic and customizable route configuration is desired."}),"\n",(0,r.jsx)(n.h4,{id:"available-endpoints-3",children:"Available Endpoints"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Endpoint"}),(0,r.jsx)(n.th,{children:"Method"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"/query/{routename}"})}),(0,r.jsx)(n.td,{children:"POST"}),(0,r.jsx)(n.td,{children:"Execute a query against a specific route"})]})})]}),"\n",(0,r.jsx)(n.h4,{id:"path-parameters-2",children:"Path Parameters"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"routename"}),": The route with one or more models based on the configured policies and route configurations"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-query-route",children:"Example: Query Route"}),"\n",(0,r.jsxs)(o.A,{children:[(0,r.jsxs)(a.A,{value:"curl",label:"curl",children:[(0,r.jsxs)(n.p,{children:["First, create a route as shown in the ",(0,r.jsx)(n.a,{href:"../javelin-core/administration/createroute",children:"Create Route"})," section."]}),(0,r.jsx)(n.p,{children:"Once you have created a route, you can query it using the following curl command:"}),(0,r.jsx)(l.A,{language:"bash",children:'curl \'https://your-api-domain.com/v1/query/your_route_name\' \\\n  -H \'Content-Type: application/json\' \\\n  -H \'Authorization: Bearer $YOUR_OPENAI_API_KEY\' \\\n  -H \'X-Javelin-apikey: $YOUR_JAVELIN_API_KEY\' \\\n  -d \'{\n    "model": "gpt-3.5-turbo",\n    "messages": [\n      {"role": "user", "content": "SANFRANCISCO is located in?"}\n    ],\n    "temperature": 0.8\n  }\''})]}),(0,r.jsxs)(a.A,{value:"python",label:"Python Requests",children:[(0,r.jsxs)(n.p,{children:["First, create a route as shown in the ",(0,r.jsx)(n.a,{href:"../javelin-core/administration/createroute",children:"Create Route"})," section."]}),(0,r.jsx)(n.p,{children:"Once you have created a route, you can query it using Python requests:"}),(0,r.jsx)(l.A,{language:"python",children:"import requests\nimport os\nimport dotenv\n\ndotenv.load_dotenv()\n\njavelin_api_key = os.getenv('JAVELIN_API_KEY')\nopenai_api_key = os.getenv('OPENAI_API_KEY')\nroute_name = 'your_route_name'\n\nurl = f'https://your-api-domain.com/v1/query/{route_name}'\n\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': f'Bearer {openai_api_key}',\n    'X-Javelin-apikey': javelin_api_key\n}\n\ndata = {\n    \"model\": \"gpt-3.5-turbo\",\n    \"messages\": [\n        {\"role\": \"user\", \"content\": \"SANFRANCISCO is located in?\"}\n    ],\n    \"temperature\": 0.8\n}\n\nresponse = requests.post(url, headers=headers, json=data)\n\nif response.status_code == 200:\n    print(response.json())\nelse:\n    print(f\"Error: {response.status_code}, {response.text}\")"})]})]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Important"}),": Make sure to replace ",(0,r.jsx)(n.code,{children:"your_route_name"}),", ",(0,r.jsx)(n.code,{children:"YOUR_OPENAI_API_KEY"}),", and ",(0,r.jsx)(n.code,{children:"YOUR_JAVELIN_API_KEY"})," with your actual values."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"sdk-integration-examples",children:"SDK Integration Examples"}),"\n",(0,r.jsx)(n.h3,{id:"python",children:"Python"}),"\n",(0,r.jsxs)(o.A,{children:[(0,r.jsxs)(a.A,{value:"py1",label:"Javelin SDK",children:[(0,r.jsx)(l.A,{language:"python",children:"pip install javelin-sdk\n"}),(0,r.jsx)(l.A,{language:"python",title:"Query Route with Javelin SDK",showLineNumbers:!0,children:'from javelin_sdk import JavelinClient, JavelinConfig, Route\nimport os\n\njavelin_api_key = os.getenv(\'JAVELIN_API_KEY\')\nllm_api_key = os.getenv("OPENAI_API_KEY")\n\n# Create Javelin configuration\nconfig = JavelinConfig(\n    base_url="https://your-api-domain.com",\n    javelin_api_key=javelin_api_key,\n    llm_api_key=llm_api_key\n)\n\n# Create Javelin client\nclient = JavelinClient(config)\n\n# Route name to get is {routename} e.g., sampleroute1\nquery_data = {\n    "messages": [ \n        {\n            "role": "system",\n            "content": "Hello, you are a helpful scientific assistant."\n        },\n        {\n            "role": "user",\n            "content": "What is the chemical composition of sugar?"\n        }\n    ],\n    "temperature": 0.8\n}\n\n# Now query the route, for async use \'await client.aquery_route("sampleroute1", query_data)\'\nresponse = client.query_route("sampleroute1", query_data)\nprint(response.model_dump_json(indent=2))'})]}),(0,r.jsxs)(a.A,{value:"py2",label:"OpenAI",children:[(0,r.jsx)(l.A,{language:"python",children:"pip install openai\n"}),(0,r.jsx)(l.A,{language:"python",title:"Query and Stream Responses with OpenAI",showLineNumbers:!0,children:'from openai import OpenAI\nimport os\n\njavelin_api_key = os.environ[\'JAVELIN_API_KEY\']\nllm_api_key = os.environ["OPENAI_API_KEY"]\n\n## Javelin Headers\n# Define Javelin headers with the API key\nconfig = JavelinConfig(\n  javelin_api_key=javelin_api_key,\n)\n\n# Define the Javelin route as a variable\njavelin_route = "sampleroute1"  # Define your universal route\n\nclient = JavelinClient(config)\nopenai_client = OpenAI(\n  api_key=openai_api_key,\n)\n# Register the OpenAI client with Javelin using the route name\nclient.register_openai(openai_client, route_name=javelin_route)\n\n\n# Query the model\n# --- Call OpenAI Endpoints ---\n\nprint("OpenAI: 1 - Chat completions")\nchat_completions = openai_client.chat.completions.create(\n    model="gpt-3.5-turbo",\n    messages=[{"role": "user", "content": "What is machine learning?"}],\n)\nprint(completion.model_dump_json(indent=2))\n\n# Streaming Responses\nstream = openai_client.chat.completions.create(\n    messages=[\n        {"role": "user", "content": "Say this is a test"}\n    ],\n    model="gpt-4o",\n    stream=True,\n)\nfor chunk in stream:\n    print(chunk.choices[0].delta.content or "", end="")'})]}),(0,r.jsxs)(a.A,{value:"py3",label:"Azure OpenAI",children:[(0,r.jsx)(l.A,{language:"shell",children:"pip install openai"}),(0,r.jsx)(l.A,{language:"python",title:"Query and Stream Responses with AzureOpenAI",showLineNumbers:!0,children:'from openai import AzureOpenAI\nimport os\n\n# Javelin Headers\njavelin_headers = {\n    "X-Javelin-apikey": javelin_api_key  # Javelin API key from admin\n}\n\n# Define the Javelin route as a variable\njavelin_route = "sampleroute1"  # Example route\n\nclient = JavelinClient(config) # Create Javelin Client\n\n# Create Azure OpenAI Client\nopenai_client = AzureOpenAI(\n    api_version="2023-07-01-preview",\n    azure_endpoint="https://javelinpreview.openai.azure.com", # Azure Endpoint\n    api_key=azure_openai_api_key\n)\n\nclient.register_azureopenai(openai_client, route_name=javelin_route) # Register Azure OpenAI Client with Javelin\n\n\ncompletion = openai_client.chat.completions.create(\n    model="gpt-4",  # e.g. gpt-3.5-turbo\n    messages=[\n        {\n            "role": "user",\n            "content": "How do I output all files in a directory using Python?",\n        },\n    ],\n)\n\nprint(completion.model_dump_json(indent=2))\n\n# Streaming Responses\nstream = openai_client.chat.completions.create(\n    model="gpt-3.5-turbo",\n    messages=[\n      {"role": "system", "content": "Hello, you are a helpful scientific assistant."},\n      {"role": "user", "content": "What is the chemical composition of sugar?"}\n    ],\n    stream=True\n)\n\nfor chunk in stream:\n  if chunk.choices:\n    print(chunk.choices[0].delta.content or "", end="")'})]}),(0,r.jsxs)(a.A,{value:"py4",label:"LangChain",children:[(0,r.jsx)(l.A,{language:"shell",children:"pip install langchain\npip install langchain-openai"}),(0,r.jsx)(l.A,{language:"python",title:"LangChain with OpenAI Example",showLineNumbers:!0,children:'from langchain_openai import ChatOpenAI\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langchain_core.output_parsers import StrOutputParser\n\nimport os\n\n# Retrieve API keys from environment variables\njavelin_api_key = os.getenv(\'JAVELIN_API_KEY\')\nllm_api_key = os.getenv("OPENAI_API_KEY")\n\nmodel_choice = "gpt-3.5-turbo"  # For example, change to "gpt-4"\n\n# Define the Javelin route as a variable\nroute_name = "sampleroute1"\n\n# Define Javelin headers with the API key\njavelin_headers = {\n    "X-Javelin-apikey": javelin_api_key  # Javelin API key from admin\n}\n\nllm = ChatOpenAI(\n    openai_api_key=openai_api_key,\n    openai_api_base="https://your-api-domain.com/v1/openai",\n    default_headers={\n        "X-Javelin-apikey": javelin_api_key,\n        "X-Javelin-route": route_name,\n        "X-Javelin-provider": "https://api.openai.com/v1",\n        "X-Javelin-model":model_choice\n        \n    }\n)\n\n\n# Define a simple prompt template\nprompt = ChatPromptTemplate.from_messages([\n    ("system", "You are a helpful assistant."),\n    ("user", "{input}")\n])\n\n# Use a simple output parser (string output)\noutput_parser = StrOutputParser()\n\n# Create the processing chain (prompt -> LLM -> parser)\nchain = prompt | llm | output_parser\n\ndef ask_question(question: str) -> str:\n    return chain.invoke({"input": question})\n\n# Example usage:\nif __name__ == "__main__":\n    question = "What is the chemical composition of water?"\n    answer = ask_question(question)\n    print("Answer:", answer)\n\n\n'})]}),(0,r.jsx)(a.A,{value:"py7",label:"OpenAI-Compatible Query Example",children:(0,r.jsx)(l.A,{language:"python",title:"OpenAI-Compatible Model Adapters Example",showLineNumbers:!0,children:'\n#This example demonstrates how Javelin uses OpenAI\'s schema as a standardized interface for different LLM providers. \n#By adopting OpenAI\'s widely-used request/response format, Javelin enables seamless integration with various LLM providers \n#(like Anthropic, Bedrock, Mistral, etc.) while maintaining a consistent API structure. This allows developers to use the \n#same code pattern regardless of the underlying model provider, with Javelin handling the necessary translations and adaptations behind the scenes.\n\nfrom javelin_sdk import JavelinClient, JavelinConfig\nimport os\nfrom typing import Dict, Any\nimport json\n\n# Helper function to pretty print responses\ndef print_response(provider: str, response: Dict[str, Any]) -> None:\n    print(f"\n=== Response from {provider} ===")\n    print(json.dumps(response, indent=2))\n\n# Setup client configuration\nconfig = JavelinConfig(\n    base_url="https://your-api-domain.com",\n    javelin_api_key=os.getenv(\'JAVELIN_API_KEY\'),\n    llm_api_key=os.getenv(\'OPENAI_API_KEY\')\n)\nclient = JavelinClient(config)\n\n# Example messages in OpenAI format\nmessages = [\n    {"role": "system", "content": "You are a helpful assistant."},\n    {"role": "user", "content": "What are the three primary colors?"}\n]\n\n# 1. Query OpenAI route\ntry:\n    openai_response = client.chat.completions.create(\n        route="openai_route",  # Route configured for OpenAI\n        messages=messages,\n        temperature=0.7,\n        max_tokens=150\n    )\n    print_response("OpenAI", openai_response)\nexcept Exception as e:\n    print(f"OpenAI query failed: {str(e)}")\n    \n=== Response from OpenAI ===\n"""\n{\n  "id": "chatcmpl-123abc",\n  "object": "chat.completion",\n  "created": 1677858242,\n  "model": "gpt-3.5-turbo",\n  "usage": {\n    "prompt_tokens": 42,\n    "completion_tokens": 38,\n    "total_tokens": 80\n  },\n  "choices": [\n    {\n      "message": {\n        "role": "assistant",\n        "content": "The three primary colors are red, blue, and yellow."\n      },\n      "finish_reason": "stop",\n      "index": 0\n    }\n  ]\n}\n"""\n# 2. Query Bedrock route (using same OpenAI format)\ntry:\n    bedrock_response = client.chat.completions.create(\n        route="bedrock_route",  # Route configured for Bedrock\n        messages=messages,\n        temperature=0.7,\n        max_tokens=150\n    )\n    print_response("Bedrock", bedrock_response)\nexcept Exception as e:\n    print(f"Bedrock query failed: {str(e)}")\n"""\n=== Response from Bedrock ===\n{\n  "id": "bedrock-123xyz",\n  "object": "chat.completion",\n  "created": 1677858243,\n  "model": "anthropic.claude-v2",\n  "usage": {\n    "prompt_tokens": 42,\n    "completion_tokens": 41,\n    "total_tokens": 83\n  },\n  "choices": [\n    {\n      "message": {\n        "role": "assistant",\n        "content": "The three primary colors are red, blue, and yellow. These colors cannot be created by mixing other colors together."\n      },\n      "finish_reason": "stop",\n      "index": 0\n    }\n  ]\n}\n"""\n\n# Example using text completions with Llama\ntry:\n    llama_response = client.completions.create(\n        route="bedrockllama",  # Route configured for Bedrock Llama\n        prompt="Write a haiku about programming:",\n        max_tokens=50,\n        temperature=0.7,\n        top_p=0.9,\n    )\n    print("=== Llama Text Completion Response ===")\n    pretty_print(llama_response)\nexcept Exception as e:\n    print(f"Llama query failed: {str(e)}")\n\n"""\n=== Llama Text Completion Response ===\n{\n  "id": "bedrock-comp-123xyz",\n  "object": "text_completion",\n  "created": 1677858244,\n  "model": "meta.llama2-70b",\n  "choices": [\n    {\n      "text": "Code flows like water\\nBugs crawl through silent errors\\nDebugger saves all",\n      "index": 0,\n      "finish_reason": "stop"\n    }\n  ],\n  "usage": {\n    "prompt_tokens": 6,\n    "completion_tokens": 15,\n    "total_tokens": 21\n  }\n}\n"""\n\n'})}),(0,r.jsxs)(a.A,{value:"py5",label:"DSPy",children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Introduction:"})," ",(0,r.jsx)(n.a,{href:"https://towardsdatascience.com/intro-to-dspy-goodbye-prompting-hello-programming-4ca1c6ce3eb9",children:"DSPy: Goodbye Prompting, Hello Programming!"}),(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:"Documentation:"})," ",(0,r.jsx)(n.a,{href:"https://dspy-docs.vercel.app/",children:"DSPy Docs"})]}),(0,r.jsx)(l.A,{language:"shell",children:"pip install dspy-ai"}),(0,r.jsx)(l.A,{language:"py",title:"Using DSPY with Javelin",showLineNumbers:!0,children:'import dspy\nfrom dsp import LM\nimport os\nimport requests\n\n# Assuming the environment variables are set correctly\njavelin_api_key = os.getenv(\'JAVELIN_API_KEY\')\nllm_api_key = os.getenv("OPENAI_API_KEY")\n\nclass Javelin(LM):\n    def __init__(self, model, api_key):\n        self.model = model\n        self.api_key = api_key\n        self.provider = "default"\n        self.kwargs = { \n                    "temperature": 1.0, \n                    "max_tokens": 500, \n                    "top_p": 1.0, \n                    "frequency_penalty": 0.0, \n                    "presence_penalty": 0.0, \n                    "stop": None, \n                    "n": 1, \n                    "logprobs": None, \n                    "logit_bias": None,\n                    "stream": False\n        }\n\n        self.base_url = "https://your-api-domain.com/v1/query/your_route_name" # Set Javelin\'s API base URL for query\n        self.javelin_headers = {\n                    "Content-Type": "application/json",\n                    "Authorization": f"Bearer { api_key }",\n                    "X-Javelin-apikey": javelin_api_key,\n        }\n\n        self.history = []\n\n    def basic_request(self, prompt: str, **kwargs):\n        headers = self.javelin_headers\n\n        data = {\n            **kwargs,\n            "model": self.model,\n            "messages": [\n                {"role": "user", "content": prompt}\n            ]\n        }\n\n        response = requests.post(self.base_url, headers=headers, json=data)\n        response = response.json()\n\n        self.history.append({\n            "prompt": prompt,\n            "response": response,\n            "kwargs": kwargs,\n        })\n        return response\n\n    def __call__(self, prompt, only_completed=True, return_sorted=False, **kwargs):\n        response = self.request(prompt, **kwargs)\n        if \'choices\' in response and len(response[\'choices\']) > 0:\n            first_choice_content = response[\'choices\'][0][\'message\'][\'content\']\n            completions = [first_choice_content]\n            return completions\n        else:\n            return ["No response found."]\n\njavelin = Javelin(model="gpt-4-1106-preview", api_key=llm_api_key)\ndspy.configure(lm=javelin)\n\n# Define a module (ChainOfThought) and assign it a signature (return an answer, given a question).\nqa = dspy.ChainOfThought(\'question -> answer\')\nresponse = qa(question="You have 3 baskets. The first basket has twice as many apples as the second basket. The third basket has 3 fewer apples than the first basket. If you have a total of 27 apples, how many apples are in each basket?")\nprint(response)'})]}),(0,r.jsxs)(a.A,{value:"py6",label:"Bedrock",children:[(0,r.jsx)(l.A,{language:"shell",children:"pip install boto3"}),(0,r.jsx)(l.A,{language:"python",title:"AWS Bedrock Integration Example - Boto3",showLineNumbers:!0,children:'import boto3\nimport json\nfrom javelin_sdk import (\n    JavelinClient,\n    JavelinConfig,\n)\n\n# Configure boto3 bedrock-runtime service client\nbedrock_runtime_client = boto3.client(\n    service_name="bedrock-runtime",\n    region_name="us-east-1"\n)\n\n# Configure boto3 bedrock service client\nbedrock_client = boto3.client(\n    service_name="bedrock",\n    region_name="us-east-1"\n)\n\n\n# Initialize Javelin Client\nconfig = JavelinConfig(\n    base_url=os.getenv(\'JAVELIN_BASE_URL\'),\n    javelin_api_key=os.getenv(\'JAVELIN_API_KEY\')\n)\nclient = JavelinClient(config)\n\n# Passing bedrock_client is recommended for optimal error handling\n# and request management, though it remains optional.\nclient.register_bedrock(\n  bedrock_runtime_client=bedrock_runtime_client, \n  bedrock_client=bedrock_client, \n  route_name="bedrock" # Universal route for the Amazon Bedrock models\n)\n\n# Example using Claude model via Bedrock Runtime\nresponse = bedrock_runtime_client.invoke_model(\n    modelId="anthropic.claude-v2:1",\n    body=json.dumps({\n        "anthropic_version": "bedrock-2023-05-31",\n        "max_tokens": 100,\n        "messages": [\n            {\n                "content": "What is machine learning?",\n                "role": "user"\n            }\n        ]\n    }),\n    contentType="application/json"\n)\nresponse_body = json.loads(response["body"].read())\nprint(f"Invoke Response: {json.dumps(response_body, indent=2)}")\n\n'}),(0,r.jsx)(l.A,{language:"python",title:"AWS Bedrock Integration Example - LangChain",showLineNumbers:!0,children:'# Example using Langchain \n\nfrom langchain_community.llms.bedrock import Bedrock as BedrockLLM\n\nllm = BedrockLLM(\n    client=bedrock_runtime_client,\n    model_id="anthropic.claude-v2:1",\n    model_kwargs={\n        "max_tokens_to_sample": 256,\n        "temperature": 0.7,\n    }\n)\n\nstream_generator = llm.stream("What is machine learning?")\nfor chunk in stream_generator:\n    print(chunk, end=\'\', flush=True)\n\n'})]}),(0,r.jsx)(a.A,{value:"py8",label:"...",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://www.llamaindex.ai/open-source",children:"LlamaIndex"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://docs.datastax.com/en/ragstack/docs/index.html",children:"DataStax RAGStack"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://jxnl.github.io/instructor/",children:"Instructor, Generating Structure from LLMs"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://microsoft.github.io/promptflow/index.html#",children:"Microsoft Prompt flow"})}),"\n"]}),"\n"]})})]}),"\n",(0,r.jsx)(n.h3,{id:"javascripttypescript",children:"JavaScript/TypeScript"}),"\n",(0,r.jsxs)(o.A,{children:[(0,r.jsxs)(a.A,{value:"js1",label:"OpenAI",children:[(0,r.jsx)(l.A,{language:"python",children:"npm install openai\n"}),(0,r.jsx)(l.A,{language:"js",title:"OpenAI API Integration Example",showLineNumbers:!0,children:'import OpenAI from "openai";\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n  baseURL: "https://your-api-domain.com/v1/query/{your_route_name}",\n  defaultHeaders: {\n    "X-Javelin-apikey": `${process.env.JAVELIN_API_KEY}`\n  },\n});\n\nasync function main() {\n  const completion = await openai.chat.completions.create({\n    messages: [{ role: "system", content: "You are a helpful assistant." }],\n    model: "gpt-3.5-turbo",\n  });\n\n  console.log(completion.choices[0]);\n}\n\nmain();'})]}),(0,r.jsxs)(a.A,{value:"js2",label:"Langchain",children:[(0,r.jsx)(l.A,{language:"python",children:"npm install @langchain/openai\n"}),(0,r.jsx)(l.A,{language:"js",title:"LangChain OpenAI Integration Example",showLineNumbers:!0,children:'import { ChatOpenAI } from \'@langchain/openai\';\n\nconst llm = new ChatOpenAI({\n    openAIApiKey: process.env.OPENAI_API_KEY,\n    configuration: {\n        basePath: "https://your-api-domain.com/v1/query/{your_route_name}",\n        defaultHeaders: {\n          "X-Javelin-apikey": `${process.env.JAVELIN_API_KEY}`\n        },\n    },\n});\n\nasync function main() {\n  const response = await llm.invoke("tell me a joke?");\n  console.log(response);\n}\n\nmain();'})]}),(0,r.jsx)(a.A,{value:"js3",label:"Bedrock",children:(0,r.jsx)(l.A,{language:"js",title:"AWS Bedrock Integration Example",showLineNumbers:!0,children:'import { BedrockRuntimeClient, InvokeModelCommand, InvokeModelWithResponseStreamCommand } from "@aws-sdk/client-bedrock-runtime";\n\nconst customHeaders = {\n  \'X-Javelin-apikey\': JAVELIN_API_KEY\n};\n\nconst client = new BedrockRuntimeClient({\n  region: AWS_REGION,\n  // Use the javelin endpoint for bedrock\n  endpoint: JAVELIN_ENDPOINT,\n  credentials: {\n    accessKeyId: AWS_ACCESS_KEY_ID,\n    secretAccessKey: AWS_SECRET_ACCESS_KEY,\n  },\n});\n\n// Add custom headers via middleware\nclient.middlewareStack.add(\n  (next, context) => async (args) => {\n    args.request.headers = {\n      ...args.request.headers,\n      ...customHeaders\n    };\n    return next(args);\n  },\n  {\n    step: "build"\n  }\n);\n\n\n\n// Query the model\nconst payload = {\n  anthropic_version: "bedrock-2023-05-31",\n  max_tokens: 1000,\n  messages: [\n    {\n      role: "user",\n      content: "What is machine learning?",\n    },\n  ],\n};\n\n\nconst command = new InvokeModelWithResponseStreamCommand({\n  contentType: "application/json",\n  body: JSON.stringify(payload),\n  "anthropic.claude-v2:1",\n});\n\nconst apiResponse = await client.send(command);\n\nfor await (const item of apiResponse.body) {\n  console.log(item);\n}\n\n'})}),(0,r.jsxs)(a.A,{value:"js4",label:"...",children:[(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://sdk.vercel.ai/docs",children:"Vercel AI SDK"})," -> ",(0,r.jsx)(n.a,{href:"https://vercel.com/blog/ai-integrations",children:"AI Integrations on Vercel"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/huggingface/chat-ui",children:"Hugging Face ChatUI"})," -> ",(0,r.jsx)(n.a,{href:"https://github.com/huggingface/chat-ui?tab=readme-ov-file#running-your-own-models-using-a-custom-endpoint",children:"Running using a custom endpoint"})]}),"\n"]}),"\n"]}),(0,r.jsxs)(n.p,{children:["We have worked on the integrations. Please contact: ",(0,r.jsx)(n.a,{href:"mailto:support@getjavelin.io",children:"support@getjavelin.io"})," if you would like to use this feature."]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,r.jsx)(n.p,{children:"All requests to Javelin endpoints require authentication using:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Javelin API Key"}),": Passed in the ",(0,r.jsx)(n.code,{children:"X-Javelin-apikey"})," header"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Model Provider API Key"}),": Passed in the ",(0,r.jsx)(n.code,{children:"Authorization"})," header (",(0,r.jsx)(n.strong,{children:"mostly"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl -X POST "https://your-javelin-domain.com/v1/chat/completions" \\\n  -H "Content-Type: application/json" \\\n  -H "Authorization: Bearer YOUR_PROVIDER_API_KEY" \\\n  -H "X-Javelin-apikey: YOUR_JAVELIN_API_KEY" \\\n  -d \'{ ... }\'\n'})}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"Javelin returns standard HTTP status codes and error messages. Common errors include:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Status Code"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Common Causes"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"400"}),(0,r.jsx)(n.td,{children:"Bad Request"}),(0,r.jsx)(n.td,{children:"Invalid request format or parameters"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"401"}),(0,r.jsx)(n.td,{children:"Unauthorized"}),(0,r.jsx)(n.td,{children:"Missing or invalid API keys"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"404"}),(0,r.jsx)(n.td,{children:"Not Found"}),(0,r.jsx)(n.td,{children:"Endpoint or route doesn't exist"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"429"}),(0,r.jsx)(n.td,{children:"Too Many Requests"}),(0,r.jsx)(n.td,{children:"Rate limit exceeded"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"500"}),(0,r.jsx)(n.td,{children:"Internal Server Error"}),(0,r.jsx)(n.td,{children:"Server-side issue"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"Example error response:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "error": {\n    "code": "401",\n    "message": "Invalid request: model parameter is required"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use Environment Variables"}),": Store API keys in environment variables, not in code."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Implement Retry Logic"}),": Add retry mechanisms for transient errors."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Set Timeouts"}),": Configure appropriate timeouts for your application needs."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Monitor Usage"}),": Use Javelin's monitoring features to track usage and costs."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Test Thoroughly"}),": Test your integration with different providers and models."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Authentication Errors"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Verify both provider and Javelin API keys are correct"}),"\n",(0,r.jsx)(n.li,{children:"Check that keys are passed in the correct headers"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Endpoint Not Found"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Confirm the endpoint URL is correct"}),"\n",(0,r.jsx)(n.li,{children:"Verify the route exists in your Javelin configuration"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Request Format Errors"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ensure your JSON payload matches the expected format"}),"\n",(0,r.jsx)(n.li,{children:"Check for required fields specific to the model you're using"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Rate Limiting"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Implement exponential backoff for retries"}),"\n",(0,r.jsx)(n.li,{children:"Consider adjusting your request patterns"}),"\n"]}),"\n"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},20249:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/javelin_integration-3255509c711708c416c70c95fbae99c2.png"}}]);