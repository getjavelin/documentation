"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[479],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(r),d=o,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return r?n.createElement(f,a(a({ref:t},p),{},{components:r})):n.createElement(f,a({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3231:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const i={},a="Retries",c={unversionedId:"javelin-core/retries",id:"javelin-core/retries",title:"Retries",description:"Javelin comes equipped with a robust mechanism that offers built-in support for retrying interactions with any Large Language Model (LLM).",source:"@site/docs/javelin-core/retries.md",sourceDirName:"javelin-core",slug:"/javelin-core/retries",permalink:"/docs/javelin-core/retries",draft:!1,editUrl:"https://github.com/getjavelin/documentation/tree/main/docs/javelin-core/retries.md",tags:[],version:"current",frontMatter:{},sidebar:"someSidebar",previous:{title:"Supported LLMs",permalink:"/docs/javelin-core/supported-llms"},next:{title:"Rate Limits",permalink:"/docs/javelin-core/ratelimits"}},s={},l=[],p={toc:l},u="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"retries"},"Retries"),(0,o.kt)("p",null,"Javelin comes equipped with a robust mechanism that offers built-in support for retrying interactions with any Large Language Model (LLM). "),(0,o.kt)("p",null,'This retry feature becomes particularly useful when an LLM provider returns a "503 Service Unavailable" error. Instead of immediately failing, Javelin will automatically attempt to reconnect, ensuring that temporary issues do not disrupt the user experience. '),(0,o.kt)("p",null,"This proactive approach aids in maintaining a smoother and more resilient interaction with the LLMs, even when faced with occasional service hiccups. Retries can be setup in the route configuration:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Setup a Route with retries enabled")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'\nfrom javelin_sdk import (\n    JavelinClient,\n    Route\n)\n\nroute_data = {\n    "routes": [\n        {\n        "name": "eng_dept",\n        "type": "chat",\n        "model": {\n         "name": "gpt-4-32k",\n         "provider": "openai",\n         "suffix": "/chat/completions"\n        "config": {\n            "retries": 3,  # setting retries to 3\n        },\n    }\n  ]\n}\n\nroute = Route.parse_obj(route_data)\n\n# update the route, enable retries\ntry:\n    await client.acreate_route(route)\nexcept NetworkError as e:\n    print("Failed to create route: Network Error")\n\n')))}m.isMDXComponent=!0}}]);