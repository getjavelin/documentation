"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6574],{40401:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>u,toc:()=>h});var a=t(74848),i=t(28453),s=t(11470),r=t(19365),l=t(21432);const o={},c="Applications",u={id:"javelin-core/integration",title:"Applications",description:"Its easy to integrate applications that leverage LLMs with Javelin. We have made it easy to seamlessly connect your applications to route all LLM traffic through Javelin with minimal code changes.",source:"@site/docs/javelin-core/integration.md",sourceDirName:"javelin-core",slug:"/javelin-core/integration",permalink:"/docs/javelin-core/integration",draft:!1,unlisted:!1,editUrl:"https://github.com/getjavelin/documentation/tree/main/docs/javelin-core/integration.md",tags:[],version:"current",frontMatter:{},sidebar:"someSidebar",previous:{title:"Supported Language Models",permalink:"/docs/javelin-core/supported-llms"},next:{title:"Overview",permalink:"/docs/javelin-core/fallbackrouting/overview"}},p={},h=[{value:"Leveraging the Javelin Platform",id:"leveraging-the-javelin-platform",level:2},{value:"Querying an LLM",id:"querying-an-llm",level:2},{value:"REST API",id:"rest-api",level:3},{value:"Python",id:"python",level:3},{value:"JavaScript/TypeScript",id:"javascripttypescript",level:3}];function d(e){const n={a:"a",br:"br",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"applications",children:"Applications"}),"\n",(0,a.jsx)(n.p,{children:"Its easy to integrate applications that leverage LLMs with Javelin. We have made it easy to seamlessly connect your applications to route all LLM traffic through Javelin with minimal code changes."}),"\n",(0,a.jsx)(n.h2,{id:"leveraging-the-javelin-platform",children:"Leveraging the Javelin Platform"}),"\n",(0,a.jsxs)(n.p,{children:["The core usage of Javelin is to define routes, and then to define what to do at each route. Rather than having your LLM Applications (like Co-Pilot apps etc.,) individually & directly point to the LLM Vendor & Model (like OpenAI, Gemini etc.,), configure the provider/model endpoint to be your Javelin endpoint. This ensures that all applications that leverage AI Models will route their requests through the gateway. Javelin supports all the ",(0,a.jsx)(n.a,{href:"supported-llms",children:"latest models and providers"}),", so you don't have to make any changes to your application or how requests to models are sent."]}),"\n",(0,a.jsxs)(n.p,{children:["See ",(0,a.jsx)(n.a,{href:"routeconfiguration",children:"Javelin Configuration"})," section, for details on how to setup routes on the gateway to different models and providers."]}),"\n",(0,a.jsxs)(n.p,{children:["See ",(0,a.jsx)(n.a,{href:"../javelin-python/quickstart",children:"Python SDK"})," for details on how you can easily embed this within your AI Apps."]}),"\n",(0,a.jsx)(n.h2,{id:"querying-an-llm",children:"Querying an LLM"}),"\n",(0,a.jsx)(n.p,{children:"Javelin may send a request to one or more models based on the configured policies and route configurations and return back a response."}),"\n",(0,a.jsx)(n.h3,{id:"rest-api",children:"REST API"}),"\n",(0,a.jsx)(s.A,{children:(0,a.jsx)(r.A,{value:"shell",label:"curl",children:(0,a.jsx)(l.A,{language:"python",children:'\ncurl -X POST -H "Content-Type: application/json" -H "x-api-key: $JAVELIN_API_KEY" -H "Authorization: Bearer $OPENAI_API_KEY" -d \'{\n  "messages": [\n    {\n      "role": "system",\n      "content": "Hello, you are a helpful scientific assistant."\n    },\n    {\n      "role": "user",\n      "content": "What is the chemical composition of sugar?"\n    }\n  ],\n  "temperature": 0.8\n}\' "https://api-dev.javelin.live/v1/query/{routename}"\n'})})}),"\n",(0,a.jsx)(n.h3,{id:"python",children:"Python"}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsxs)(r.A,{value:"py1",label:"Javelin SDK",children:[(0,a.jsx)(l.A,{language:"python",children:"pip install javelin-sdk\n"}),(0,a.jsx)(l.A,{language:"python",title:"Query Route with Javelin SDK",showLineNumbers:!0,children:'from javelin_sdk import JavelinClient, JavelinConfig, Route\nimport os\n\njavelin_api_key = os.getenv(\'JAVELIN_API_KEY\')\nllm_api_key = os.getenv("OPENAI_API_KEY")\n\n# Create Javelin configuration\nconfig = JavelinConfig(\n    base_url="https://api-dev.javelin.live",\n    javelin_api_key=javelin_api_key,\n    llm_api_key=llm_api_key\n)\n\n# Create Javelin client\nclient = JavelinClient(config)\n\n# Route name to get is {routename} e.g., sampleroute1\nquery_data = {\n    "messages": [ \n        {\n            "role": "system",\n            "content": "Hello, you are a helpful scientific assistant."\n        },\n        {\n            "role": "user",\n            "content": "What is the chemical composition of sugar?"\n        }\n    ],\n    "temperature": 0.8\n}\n\n# Now query the route, for async use \'await client.aquery_route("sampleroute1", query_data)\'\nresponse = client.query_route("sampleroute1", query_data)\nprint(response.model_dump_json(indent=2))'})]}),(0,a.jsxs)(r.A,{value:"py2",label:"OpenAI",children:[(0,a.jsx)(l.A,{language:"python",children:"pip install openai\n"}),(0,a.jsx)(l.A,{language:"python",title:"Query and Stream Responses with OpenAI",showLineNumbers:!0,children:'from openai import OpenAI\nimport os\n\njavelin_api_key = os.environ[\'JAVELIN_API_KEY\']\nllm_api_key = os.environ["OPENAI_API_KEY"]\n\n# Javelin Headers\njavelin_headers = {\n    "x-api-key": javelin_api_key,       # Javelin API key from admin\n    "x-javelin-route": "sampleroute1"  # Javelin route to use\n}\n\n# Create OpenAI Client\nclient = OpenAI(api_key=llm_api_key,\n                base_url="https://api-dev.javelin.live/v1/query", # Set Javelin\'s API base URL for query\n                default_headers=javelin_headers)\n\n# Query the model\ncompletion = client.chat.completions.create(\n  model="gpt-3.5-turbo",\n  messages=[\n    {"role": "system", "content": "Hello, you are a helpful scientific assistant"},\n    {"role": "user", "content": "What is the chemical composition of sugar?"}\n  ]\n)\n\nprint(completion.model_dump_json(indent=2))\n\n# Streaming Responses\nstream = client.chat.completions.create(\n    model="gpt-3.5-turbo",\n    messages=[\n      {"role": "system", "content": "Hello, you are a helpful scientific assistant."},\n      {"role": "user", "content": "What is the chemical composition of sugar?"}\n    ],\n    stream=True\n)\n\nfor chunk in stream:\n    print(chunk.choices[0].delta.content or "", end="")'})]}),(0,a.jsxs)(r.A,{value:"py3",label:"Azure OpenAI",children:[(0,a.jsx)(l.A,{language:"shell",children:"pip install openai"}),(0,a.jsx)(l.A,{language:"python",title:"Query and Stream Responses with AzureOpenAI",showLineNumbers:!0,children:'from openai import AzureOpenAI\nimport os\n\n# Javelin Headers\njavelin_api_key = os.environ[\'JAVELIN_API_KEY\']\nllm_api_key = os.environ["AZURE_OPENAI_API_KEY"]\n\njavelin_headers = {\n    "x-api-key": javelin_api_key,     # Javelin API key from admin\n    "x-javelin-route": "sampleroute1" # Javelin route to use\n}\n\nclient = AzureOpenAI(api_key=llm_api_key,\n                     base_url="https://api-dev.javelin.live/v1/query", # Set Javelin\'s API base URL for query\n                     default_headers=javelin_headers,\n                     api_version="2023-07-01-preview")\n\ncompletion = client.chat.completions.create(\n  model="gpt-3.5-turbo",\n  messages=[\n    {"role": "system", "content": "Hello, you are a helpful scientific assistant."},\n    {"role": "user", "content": "What is the chemical composition of sugar?"}\n  ]\n)\n\nprint(completion.model_dump_json(indent=2))\n\n# Streaming Responses\nstream = client.chat.completions.create(\n    model="gpt-3.5-turbo",\n    messages=[\n      {"role": "system", "content": "Hello, you are a helpful scientific assistant."},\n      {"role": "user", "content": "What is the chemical composition of sugar?"}\n    ],\n    stream=True\n)\n\nfor chunk in stream:\n  if chunk.choices:\n    print(chunk.choices[0].delta.content or "", end="")'})]}),(0,a.jsxs)(r.A,{value:"py4",label:"LangChain",children:[(0,a.jsx)(l.A,{language:"shell",children:"pip install langchain\npip install langchain-openai"}),(0,a.jsx)(l.A,{language:"python",title:"LangChain with OpenAI Example",showLineNumbers:!0,children:'from langchain_openai import ChatOpenAI\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langchain_core.output_parsers import StrOutputParser\n\nimport os\n\njavelin_api_key = os.getenv(\'JAVELIN_API_KEY\')\nllm_api_key = os.getenv("OPENAI_API_KEY")\njavelin_headers = {\n    "x-api-key": javelin_api_key,      # Javelin API key from admin\n    "x-javelin-route": "sample_route1" # Javelin route to use\n}\n\nllm = ChatOpenAI(\n    openai_api_base="https://api-dev.javelin.live/v1/query", # Set Javelin\'s API base URL for query\n    openai_api_key=llm_api_key,\n    model_kwargs={\n      "extra_headers": javelin_headers\n    },\n)\n\nprompt = ChatPromptTemplate.from_messages([\n    ("system", "Hello, you are a helpful scientific assistant."),\n    ("user", "{input}")\n])\n\noutput_parser = StrOutputParser()\n\nchain = prompt | llm | output_parser\n\nprint(chain.invoke({"input": "What is the chemical composition of sugar?"}))\n'})]}),(0,a.jsxs)(r.A,{value:"py5",label:"DSPy",children:[(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Introduction:"})," ",(0,a.jsx)(n.a,{href:"https://towardsdatascience.com/intro-to-dspy-goodbye-prompting-hello-programming-4ca1c6ce3eb9",children:"DSPy: Goodbye Prompting, Hello Programming!"}),(0,a.jsx)(n.br,{}),"\n",(0,a.jsx)(n.strong,{children:"Documentation:"})," ",(0,a.jsx)(n.a,{href:"https://dspy-docs.vercel.app/",children:"DSPy Docs"})]}),(0,a.jsx)(l.A,{language:"shell",children:"pip install dspy-ai"}),(0,a.jsx)(l.A,{language:"py",title:"Using DSPY with Javelin",showLineNumbers:!0,children:'import dspy\nfrom dsp import LM\nimport os\nimport requests\n\n# Assuming the environment variables are set correctly\njavelin_api_key = os.getenv(\'JAVELIN_API_KEY\')\nllm_api_key = os.getenv("OPENAI_API_KEY")\n\nclass Javelin(LM):\n    def __init__(self, model, api_key):\n        self.model = model\n        self.api_key = api_key\n        self.provider = "default"\n        self.kwargs = { \n                    "temperature": 1.0, \n                    "max_tokens": 500, \n                    "top_p": 1.0, \n                    "frequency_penalty": 0.0, \n                    "presence_penalty": 0.0, \n                    "stop": None, \n                    "n": 1, \n                    "logprobs": None, \n                    "logit_bias": None,\n                    "stream": False\n        }\n\n        self.base_url = "https://api-dev.javelin.live/v1/query/" # Set Javelin\'s API base URL for query\n        self.javelin_headers = {\n                    "Content-Type": "application/json",\n                    "Authorization": f"Bearer { api_key }",\n                    "x-javelin-route": "openai", # route name configured for OpenAI\n                    "x-api-key": javelin_api_key,\n        }\n\n        self.history = []\n\n    def basic_request(self, prompt: str, **kwargs):\n        headers = self.javelin_headers\n\n        data = {\n            **kwargs,\n            "model": self.model,\n            "messages": [\n                {"role": "user", "content": prompt}\n            ]\n        }\n\n        response = requests.post(self.base_url, headers=headers, json=data)\n        response = response.json()\n\n        self.history.append({\n            "prompt": prompt,\n            "response": response,\n            "kwargs": kwargs,\n        })\n        return response\n\n    def __call__(self, prompt, only_completed=True, return_sorted=False, **kwargs):\n        response = self.request(prompt, **kwargs)\n        if \'choices\' in response and len(response[\'choices\']) > 0:\n            first_choice_content = response[\'choices\'][0][\'message\'][\'content\']\n            completions = [first_choice_content]\n            return completions\n        else:\n            return ["No response found."]\n\njavelin = Javelin(model="gpt-4-1106-preview", api_key=llm_api_key)\ndspy.configure(lm=javelin)\n\n# Define a module (ChainOfThought) and assign it a signature (return an answer, given a question).\nqa = dspy.ChainOfThought(\'question -> answer\')\nresponse = qa(question="You have 3 baskets. The first basket has twice as many apples as the second basket. The third basket has 3 fewer apples than the first basket. If you have a total of 27 apples, how many apples are in each basket?")\nprint(response)'})]}),(0,a.jsx)(r.A,{value:"py6",label:"...",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://www.llamaindex.ai/open-source",children:"LlamaIndex"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://docs.datastax.com/en/ragstack/docs/index.html",children:"DataStax RAGStack"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://jxnl.github.io/instructor/",children:"Instructor, Generating Structure from LLMs"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://microsoft.github.io/promptflow/index.html#",children:"Microsoft Prompt flow"})}),"\n"]}),"\n"]})})]}),"\n",(0,a.jsx)(n.h3,{id:"javascripttypescript",children:"JavaScript/TypeScript"}),"\n",(0,a.jsxs)(s.A,{children:[(0,a.jsxs)(r.A,{value:"js1",label:"OpenAI",children:[(0,a.jsx)(l.A,{language:"python",children:"npm install openai\n"}),(0,a.jsx)(l.A,{language:"js",title:"OpenAI API Integration Example",showLineNumbers:!0,children:'import OpenAI from "openai";\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n  baseURL: "https://api-dev.javelin.live/v1/query",\n  defaultHeaders: {\n    "x-api-key": `${process.env.JAVELIN_API_KEY}`,\n    "x-javelin-route": "sample_route1",\n  },\n});\n\nasync function main() {\n  const completion = await openai.chat.completions.create({\n    messages: [{ role: "system", content: "You are a helpful assistant." }],\n    model: "gpt-3.5-turbo",\n  });\n\n  console.log(completion.choices[0]);\n}\n\nmain();'})]}),(0,a.jsxs)(r.A,{value:"js2",label:"Langchain",children:[(0,a.jsx)(l.A,{language:"python",children:"npm install @langchain/openai\n"}),(0,a.jsx)(l.A,{language:"js",title:"LangChain OpenAI Integration Example",showLineNumbers:!0,children:'import { ChatOpenAI } from \'@langchain/openai\';\n\nconst llm = new ChatOpenAI({\n    openAIApiKey: process.env.OPENAI_API_KEY,\n    configuration: {\n        basePath: "https://api-dev.javelin.live/v1/query",\n        defaultHeaders: {\n          "x-api-key": `${process.env.JAVELIN_API_KEY}`,\n          "x-javelin-route": "sample_route1",\n        },\n    },\n});\n\nasync function main() {\n  const response = await llm.invoke("tell me a joke?");\n  console.log(response);\n}\n\nmain();'})]}),(0,a.jsxs)(r.A,{value:"js3",label:"...",children:[(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://sdk.vercel.ai/docs",children:"Vercel AI SDK"})," -> ",(0,a.jsx)(n.a,{href:"https://vercel.com/blog/ai-integrations",children:"AI Integrations on Vercel"})]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.a,{href:"https://github.com/huggingface/chat-ui",children:"Hugging Face ChatUI"})," -> ",(0,a.jsx)(n.a,{href:"https://github.com/huggingface/chat-ui?tab=readme-ov-file#running-your-own-models-using-a-custom-endpoint",children:"Running using a custom endpoint"})]}),"\n"]}),"\n"]}),(0,a.jsxs)(n.p,{children:["We have worked on the integrations. Please contact: ",(0,a.jsx)(n.a,{href:"mailto:support@getjavelin.io",children:"support@getjavelin.io"})," if you would like to use this feature."]})]})]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var a=t(18215);const i={tabItem:"tabItem_Ymn6"};var s=t(74848);function r(e){let{children:n,hidden:t,className:r}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,a.A)(i.tabItem,r),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>A});var a=t(96540),i=t(18215),s=t(23104),r=t(56347),l=t(205),o=t(57485),c=t(31682),u=t(70679);function p(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??function(e){return p(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:i}}=e;return{value:n,label:t,attributes:a,default:i}}))}(t);return function(e){const n=(0,c.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function d(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function m(e){let{queryString:n=!1,groupId:t}=e;const i=(0,r.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o.aZ)(s),(0,a.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(i.location.search);n.set(s,e),i.replace({...i.location,search:n.toString()})}),[s,i])]}function v(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,s=h(e),[r,o]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!d({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:s}))),[c,p]=m({queryString:t,groupId:i}),[v,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[i,s]=(0,u.Dv)(t);return[i,(0,a.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:i}),f=(()=>{const e=c??v;return d({value:e,tabValues:s})?e:null})();(0,l.A)((()=>{f&&o(f)}),[f]);return{selectedValue:r,selectValue:(0,a.useCallback)((e=>{if(!d({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);o(e),p(e),g(e)}),[p,g,s]),tabValues:s}}var g=t(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=t(74848);function _(e){let{className:n,block:t,selectedValue:a,selectValue:r,tabValues:l}=e;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.a_)(),u=e=>{const n=e.currentTarget,t=o.indexOf(n),i=l[t].value;i!==a&&(c(n),r(i))},p=e=>{let n=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":t},n),children:l.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:a===n?0:-1,"aria-selected":a===n,ref:e=>o.push(e),onKeyDown:p,onClick:u,...s,className:(0,i.A)("tabs__item",f.tabItem,s?.className,{"tabs__item--active":a===n}),children:t??n},n)}))})}function j(e){let{lazy:n,children:t,selectedValue:i}=e;const s=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===i));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==i})))})}function b(e){const n=v(e);return(0,y.jsxs)("div",{className:(0,i.A)("tabs-container",f.tabList),children:[(0,y.jsx)(_,{...n,...e}),(0,y.jsx)(j,{...n,...e})]})}function A(e){const n=(0,g.A)();return(0,y.jsx)(b,{...e,children:p(e.children)},String(n))}}}]);