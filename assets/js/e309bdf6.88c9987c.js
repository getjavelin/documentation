"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[219],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),u=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,l=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(r),k=o,m=d["".concat(i,".").concat(k)]||d[k]||c[k]||l;return r?n.createElement(m,a(a({ref:t},p),{},{components:r})):n.createElement(m,a({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=r.length,a=new Array(l);a[0]=k;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[d]="string"==typeof e?e:o,a[1]=s;for(var u=2;u<l;u++)a[u]=r[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}k.displayName="MDXCreateElement"},9349:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var n=r(7462),o=(r(7294),r(3905));const l={},a="API Reference",s={unversionedId:"javelin-python/api-reference",id:"javelin-python/api-reference",title:"API Reference",description:"Overview",source:"@site/docs/javelin-python/api-reference.md",sourceDirName:"javelin-python",slug:"/javelin-python/api-reference",permalink:"/docs/javelin-python/api-reference",draft:!1,editUrl:"https://github.com/getjavelin/documentation/tree/main/docs/javelin-python/api-reference.md",tags:[],version:"current",frontMatter:{}},i={},u=[{value:"Overview",id:"overview",level:2},{value:"class JavelinClient:",id:"class-javelinclient",level:2},{value:"<strong>Synchronous Methods</strong>",id:"synchronous-methods",level:3},{value:"<code>close(self)</code>",id:"closeself",level:4},{value:"<code>get_route(self, route_name: str) -&gt; Route</code>",id:"get_routeself-route_name-str---route",level:4},{value:"<code>create_route(self, route: Route) -&gt; str</code>",id:"create_routeself-route-route---str",level:4},{value:"<code>update_route(self, route: Route) -&gt; str</code>",id:"update_routeself-route-route---str",level:4},{value:"<code>list_routes(self) -&gt; Routes</code>",id:"list_routesself---routes",level:4},{value:"<code>query_route(self, route_name: str, query_body: Dict[str, Any]) -&gt; QueryResponse</code>",id:"query_routeself-route_name-str-query_body-dictstr-any---queryresponse",level:4},{value:"<strong>Asynchronous Methods</strong>",id:"asynchronous-methods",level:3},{value:"<code>aclose(self)</code>",id:"acloseself",level:4},{value:"<code>aget_route(self, route_name: str) -&gt; Route</code>",id:"aget_routeself-route_name-str---route",level:4},{value:"<code>acreate_route(self, route: Route) -&gt; str</code>",id:"acreate_routeself-route-route---str",level:4},{value:"<code>aupdate_route(self, route: Route) -&gt; str</code>",id:"aupdate_routeself-route-route---str",level:4},{value:"<code>alist_routes(self) -&gt; Routes</code>",id:"alist_routesself---routes",level:4},{value:"<code>aquery_route(self, route_name: str, query_body: Dict[str, Any]) -&gt; QueryResponse</code>",id:"aquery_routeself-route_name-str-query_body-dictstr-any---queryresponse",level:4},{value:"<code>adelete_route(self, route_name: str) -&gt; str</code>",id:"adelete_routeself-route_name-str---str",level:4},{value:"JavelinClientError",id:"javelinclienterror",level:3},{value:"<code>__init__(self, message: str, response: Optional[Response] = None) -&gt; None</code>",id:"__init__self-message-str-response-optionalresponse--none---none",level:4},{value:"<code>__str__(self)</code>",id:"__str__self",level:4},{value:"Derived Exceptions",id:"derived-exceptions",level:3},{value:"<code>NetworkError</code>",id:"networkerror",level:4},{value:"<code>RouteNotFoundError</code>",id:"routenotfounderror",level:4},{value:"<code>RateLimitExceededError</code>",id:"ratelimitexceedederror",level:4},{value:"<code>RouteAlreadyExistsError</code>",id:"routealreadyexistserror",level:4},{value:"<code>InternalServerError</code>",id:"internalservererror",level:4},{value:"<code>MethodNotAllowedError</code>",id:"methodnotallowederror",level:4},{value:"<code>UnauthorizedError</code>",id:"unauthorizederror",level:4},{value:"<code>ValidationError</code>",id:"validationerror",level:4}],p={toc:u},d="wrapper";function c(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"api-reference"},"API Reference"),(0,o.kt)("h2",{id:"overview"},"Overview"),(0,o.kt)("p",null,"This API allows users to manage and query routes. Below you'll find both synchronous and asynchronous methods detailed separately."),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"class-javelinclient"},"class JavelinClient:"),(0,o.kt)("h3",{id:"synchronous-methods"},(0,o.kt)("strong",{parentName:"h3"},"Synchronous Methods")),(0,o.kt)("h4",{id:"closeself"},(0,o.kt)("inlineCode",{parentName:"h4"},"close(self)")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Description"),": Closes the connection or resources associated with the object.  "),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"get_routeself-route_name-str---route"},(0,o.kt)("inlineCode",{parentName:"h4"},"get_route(self, route_name: str) -> Route")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Description"),": Retrieves the details of a specific route given its name.  "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"route_name")," : Name of the route to retrieve.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Route"),": The route object.")),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"create_routeself-route-route---str"},(0,o.kt)("inlineCode",{parentName:"h4"},"create_route(self, route: Route) -> str")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Description"),": Creates a new route based on the provided route object.  "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"route")," : Route object with details for creation.  ")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"str"),': "OK" if the Route was created successfully')),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"update_routeself-route-route---str"},(0,o.kt)("inlineCode",{parentName:"h4"},"update_route(self, route: Route) -> str")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Description"),": Updates an existing route based on the provided route object.  "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"route")," (Route): Route object with updated details.  ")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"str"),": Confirmation message or ID of the updated route.")),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"list_routesself---routes"},(0,o.kt)("inlineCode",{parentName:"h4"},"list_routes(self) -> Routes")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Description"),": Lists all available routes.  "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Routes"),": A collection of route objects.")),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"query_routeself-route_name-str-query_body-dictstr-any---queryresponse"},(0,o.kt)("inlineCode",{parentName:"h4"},"query_route(self, route_name: str, query_body: Dict[str, Any]) -> QueryResponse")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Description"),": Queries a specific route based on the given query parameters.  "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"route_name")," (str): Name of the route to query."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"query_body")," (Dict","[str, Any]","): Dictionary containing query parameters.")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"asynchronous-methods"},(0,o.kt)("strong",{parentName:"h3"},"Asynchronous Methods")),(0,o.kt)("h4",{id:"acloseself"},(0,o.kt)("inlineCode",{parentName:"h4"},"aclose(self)")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Description"),": Asynchronously closes the connection or resources associated with the object."),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"aget_routeself-route_name-str---route"},(0,o.kt)("inlineCode",{parentName:"h4"},"aget_route(self, route_name: str) -> Route")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Description"),": Asynchronously retrieves the details of a specific route given its name.  "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"route_name")," (str): Name of the route to retrieve.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Route"),": The route object.")),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"acreate_routeself-route-route---str"},(0,o.kt)("inlineCode",{parentName:"h4"},"acreate_route(self, route: Route) -> str")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Description"),": Asynchronously creates a new route based on the provided route object. "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"route")," (Route): Route object with details for creation.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"str"),": Confirmation message or ID of the created route.")),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"aupdate_routeself-route-route---str"},(0,o.kt)("inlineCode",{parentName:"h4"},"aupdate_route(self, route: Route) -> str")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Description"),": Asynchronously updates an existing route based on the provided route object.  "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"route")," (Route): Route object with updated details.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"str"),": Confirmation message or ID of the updated route.")),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"alist_routesself---routes"},(0,o.kt)("inlineCode",{parentName:"h4"},"alist_routes(self) -> Routes")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Description"),": Asynchronously lists all available routes.  "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Routes"),": A collection of route objects.")),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"aquery_routeself-route_name-str-query_body-dictstr-any---queryresponse"},(0,o.kt)("inlineCode",{parentName:"h4"},"aquery_route(self, route_name: str, query_body: Dict[str, Any]) -> QueryResponse")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Description"),": Asynchronously queries a specific route based on the given query parameters.  "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"route_name")," (str): Name of the route to query."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"query_body")," (Dict","[str, Any]","): Dictionary containing query parameters.")),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"adelete_routeself-route_name-str---str"},(0,o.kt)("inlineCode",{parentName:"h4"},"adelete_route(self, route_name: str) -> str")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Description"),": Asynchronously deletes a specific route based on its name.  "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"route_name")," (str): Name of the route to delete.  ")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"str"),": Confirmation message or ID of the deleted route.  ")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"javelinclienterror"},"JavelinClientError"),(0,o.kt)("p",null,"A base exception class for the Javelin client."),(0,o.kt)("h4",{id:"__init__self-message-str-response-optionalresponse--none---none"},(0,o.kt)("inlineCode",{parentName:"h4"},"__init__(self, message: str, response: Optional[Response] = None) -> None")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Parameters:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"message"),": A string containing the error message."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"response")," (Optional): A ",(0,o.kt)("inlineCode",{parentName:"li"},"Response")," object that may contain additional information about the error.")),(0,o.kt)("h4",{id:"__str__self"},(0,o.kt)("inlineCode",{parentName:"h4"},"__str__(self)")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Return type:")," ",(0,o.kt)("inlineCode",{parentName:"p"},"str"),"\nReturns a string representation of the error."),(0,o.kt)("h3",{id:"derived-exceptions"},"Derived Exceptions"),(0,o.kt)("h4",{id:"networkerror"},(0,o.kt)("inlineCode",{parentName:"h4"},"NetworkError")),(0,o.kt)("p",null,"Indicates a network-related error while communicating with the Javelin service."),(0,o.kt)("h4",{id:"routenotfounderror"},(0,o.kt)("inlineCode",{parentName:"h4"},"RouteNotFoundError")),(0,o.kt)("p",null,"Indicates that a specified route was not found in the Javelin service."),(0,o.kt)("h4",{id:"ratelimitexceedederror"},(0,o.kt)("inlineCode",{parentName:"h4"},"RateLimitExceededError")),(0,o.kt)("p",null,"Indicates that the rate limit for the Javelin service has been exceeded."),(0,o.kt)("h4",{id:"routealreadyexistserror"},(0,o.kt)("inlineCode",{parentName:"h4"},"RouteAlreadyExistsError")),(0,o.kt)("p",null,"Indicates that an attempt was made to create a route that already exists in the Javelin service."),(0,o.kt)("h4",{id:"internalservererror"},(0,o.kt)("inlineCode",{parentName:"h4"},"InternalServerError")),(0,o.kt)("p",null,"Indicates that the Javelin service encountered an internal server error."),(0,o.kt)("h4",{id:"methodnotallowederror"},(0,o.kt)("inlineCode",{parentName:"h4"},"MethodNotAllowedError")),(0,o.kt)("p",null,"Indicates that an attempted method is not allowed on the specified route or resource."),(0,o.kt)("h4",{id:"unauthorizederror"},(0,o.kt)("inlineCode",{parentName:"h4"},"UnauthorizedError")),(0,o.kt)("p",null,"Indicates that the client is not authorized to perform the attempted action on the Javelin service."),(0,o.kt)("h4",{id:"validationerror"},(0,o.kt)("inlineCode",{parentName:"h4"},"ValidationError")),(0,o.kt)("p",null,"Indicates that there was a validation error with the provided data or request."),(0,o.kt)("p",null,"models.py\nclass RouteConfig(BaseModel):\nFields:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"rate_limit\nowner\norganization\narchive\nretries\nbudget\n")),(0,o.kt)("p",null,"class Model(BaseModel):\nFields:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"name\nprovider\nsuffix\n")),(0,o.kt)("p",null,"class Route(BaseModel):\nFields:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"name\nmodel\nconfig\n")),(0,o.kt)("p",null,"class Routes(BaseModel):\nFields:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"routes\n")),(0,o.kt)("p",null,"class Message(BaseModel):\nFields:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"role\ncontent\n")),(0,o.kt)("p",null,"class ResponseMetaData(BaseModel):\nFields:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"route_name\nmodel\narchive_enabled\ninput_tokens\noutput_tokens\ntotal_tokens\nusage\nretries\nthrottled\n")),(0,o.kt)("p",null,"class QueryResponse(BaseModel):\nFields:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"llm_response\nmetadata\n")))}c.isMDXComponent=!0}}]);